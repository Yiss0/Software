
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Medication
 * 
 */
export type Medication = $Result.DefaultSelection<Prisma.$MedicationPayload>
/**
 * Model Schedule
 * 
 */
export type Schedule = $Result.DefaultSelection<Prisma.$SchedulePayload>
/**
 * Model IntakeLog
 * 
 */
export type IntakeLog = $Result.DefaultSelection<Prisma.$IntakeLogPayload>
/**
 * Model PatientCaregiver
 * 
 */
export type PatientCaregiver = $Result.DefaultSelection<Prisma.$PatientCaregiverPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.medication`: Exposes CRUD operations for the **Medication** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Medications
    * const medications = await prisma.medication.findMany()
    * ```
    */
  get medication(): Prisma.MedicationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.schedule`: Exposes CRUD operations for the **Schedule** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Schedules
    * const schedules = await prisma.schedule.findMany()
    * ```
    */
  get schedule(): Prisma.ScheduleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.intakeLog`: Exposes CRUD operations for the **IntakeLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more IntakeLogs
    * const intakeLogs = await prisma.intakeLog.findMany()
    * ```
    */
  get intakeLog(): Prisma.IntakeLogDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.patientCaregiver`: Exposes CRUD operations for the **PatientCaregiver** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PatientCaregivers
    * const patientCaregivers = await prisma.patientCaregiver.findMany()
    * ```
    */
  get patientCaregiver(): Prisma.PatientCaregiverDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.16.3
   * Query Engine version: bb420e667c1820a8c05a38023385f6cc7ef8e83a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Medication: 'Medication',
    Schedule: 'Schedule',
    IntakeLog: 'IntakeLog',
    PatientCaregiver: 'PatientCaregiver'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "medication" | "schedule" | "intakeLog" | "patientCaregiver"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Medication: {
        payload: Prisma.$MedicationPayload<ExtArgs>
        fields: Prisma.MedicationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MedicationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MedicationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationPayload>
          }
          findFirst: {
            args: Prisma.MedicationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MedicationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationPayload>
          }
          findMany: {
            args: Prisma.MedicationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationPayload>[]
          }
          create: {
            args: Prisma.MedicationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationPayload>
          }
          createMany: {
            args: Prisma.MedicationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MedicationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationPayload>[]
          }
          delete: {
            args: Prisma.MedicationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationPayload>
          }
          update: {
            args: Prisma.MedicationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationPayload>
          }
          deleteMany: {
            args: Prisma.MedicationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MedicationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MedicationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationPayload>[]
          }
          upsert: {
            args: Prisma.MedicationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MedicationPayload>
          }
          aggregate: {
            args: Prisma.MedicationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMedication>
          }
          groupBy: {
            args: Prisma.MedicationGroupByArgs<ExtArgs>
            result: $Utils.Optional<MedicationGroupByOutputType>[]
          }
          count: {
            args: Prisma.MedicationCountArgs<ExtArgs>
            result: $Utils.Optional<MedicationCountAggregateOutputType> | number
          }
        }
      }
      Schedule: {
        payload: Prisma.$SchedulePayload<ExtArgs>
        fields: Prisma.ScheduleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScheduleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScheduleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          findFirst: {
            args: Prisma.ScheduleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScheduleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          findMany: {
            args: Prisma.ScheduleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>[]
          }
          create: {
            args: Prisma.ScheduleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          createMany: {
            args: Prisma.ScheduleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ScheduleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>[]
          }
          delete: {
            args: Prisma.ScheduleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          update: {
            args: Prisma.ScheduleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          deleteMany: {
            args: Prisma.ScheduleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScheduleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ScheduleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>[]
          }
          upsert: {
            args: Prisma.ScheduleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SchedulePayload>
          }
          aggregate: {
            args: Prisma.ScheduleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSchedule>
          }
          groupBy: {
            args: Prisma.ScheduleGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScheduleGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScheduleCountArgs<ExtArgs>
            result: $Utils.Optional<ScheduleCountAggregateOutputType> | number
          }
        }
      }
      IntakeLog: {
        payload: Prisma.$IntakeLogPayload<ExtArgs>
        fields: Prisma.IntakeLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.IntakeLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntakeLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.IntakeLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntakeLogPayload>
          }
          findFirst: {
            args: Prisma.IntakeLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntakeLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.IntakeLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntakeLogPayload>
          }
          findMany: {
            args: Prisma.IntakeLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntakeLogPayload>[]
          }
          create: {
            args: Prisma.IntakeLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntakeLogPayload>
          }
          createMany: {
            args: Prisma.IntakeLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.IntakeLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntakeLogPayload>[]
          }
          delete: {
            args: Prisma.IntakeLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntakeLogPayload>
          }
          update: {
            args: Prisma.IntakeLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntakeLogPayload>
          }
          deleteMany: {
            args: Prisma.IntakeLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.IntakeLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.IntakeLogUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntakeLogPayload>[]
          }
          upsert: {
            args: Prisma.IntakeLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$IntakeLogPayload>
          }
          aggregate: {
            args: Prisma.IntakeLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateIntakeLog>
          }
          groupBy: {
            args: Prisma.IntakeLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<IntakeLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.IntakeLogCountArgs<ExtArgs>
            result: $Utils.Optional<IntakeLogCountAggregateOutputType> | number
          }
        }
      }
      PatientCaregiver: {
        payload: Prisma.$PatientCaregiverPayload<ExtArgs>
        fields: Prisma.PatientCaregiverFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PatientCaregiverFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientCaregiverPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PatientCaregiverFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientCaregiverPayload>
          }
          findFirst: {
            args: Prisma.PatientCaregiverFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientCaregiverPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PatientCaregiverFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientCaregiverPayload>
          }
          findMany: {
            args: Prisma.PatientCaregiverFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientCaregiverPayload>[]
          }
          create: {
            args: Prisma.PatientCaregiverCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientCaregiverPayload>
          }
          createMany: {
            args: Prisma.PatientCaregiverCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PatientCaregiverCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientCaregiverPayload>[]
          }
          delete: {
            args: Prisma.PatientCaregiverDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientCaregiverPayload>
          }
          update: {
            args: Prisma.PatientCaregiverUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientCaregiverPayload>
          }
          deleteMany: {
            args: Prisma.PatientCaregiverDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PatientCaregiverUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PatientCaregiverUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientCaregiverPayload>[]
          }
          upsert: {
            args: Prisma.PatientCaregiverUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PatientCaregiverPayload>
          }
          aggregate: {
            args: Prisma.PatientCaregiverAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePatientCaregiver>
          }
          groupBy: {
            args: Prisma.PatientCaregiverGroupByArgs<ExtArgs>
            result: $Utils.Optional<PatientCaregiverGroupByOutputType>[]
          }
          count: {
            args: Prisma.PatientCaregiverCountArgs<ExtArgs>
            result: $Utils.Optional<PatientCaregiverCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Instance of a Driver Adapter, e.g., like one provided by `@prisma/adapter-planetscale`
     */
    adapter?: runtime.SqlDriverAdapterFactory | null
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    medication?: MedicationOmit
    schedule?: ScheduleOmit
    intakeLog?: IntakeLogOmit
    patientCaregiver?: PatientCaregiverOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    medications: number
    patientLinks: number
    caregiverLinks: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    medications?: boolean | UserCountOutputTypeCountMedicationsArgs
    patientLinks?: boolean | UserCountOutputTypeCountPatientLinksArgs
    caregiverLinks?: boolean | UserCountOutputTypeCountCaregiverLinksArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMedicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPatientLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientCaregiverWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCaregiverLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientCaregiverWhereInput
  }


  /**
   * Count Type MedicationCountOutputType
   */

  export type MedicationCountOutputType = {
    schedules: number
    intakes: number
  }

  export type MedicationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    schedules?: boolean | MedicationCountOutputTypeCountSchedulesArgs
    intakes?: boolean | MedicationCountOutputTypeCountIntakesArgs
  }

  // Custom InputTypes
  /**
   * MedicationCountOutputType without action
   */
  export type MedicationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MedicationCountOutputType
     */
    select?: MedicationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MedicationCountOutputType without action
   */
  export type MedicationCountOutputTypeCountSchedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleWhereInput
  }

  /**
   * MedicationCountOutputType without action
   */
  export type MedicationCountOutputTypeCountIntakesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IntakeLogWhereInput
  }


  /**
   * Count Type ScheduleCountOutputType
   */

  export type ScheduleCountOutputType = {
    intakes: number
  }

  export type ScheduleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    intakes?: boolean | ScheduleCountOutputTypeCountIntakesArgs
  }

  // Custom InputTypes
  /**
   * ScheduleCountOutputType without action
   */
  export type ScheduleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScheduleCountOutputType
     */
    select?: ScheduleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ScheduleCountOutputType without action
   */
  export type ScheduleCountOutputTypeCountIntakesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IntakeLogWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    phone: string | null
    role: string | null
    password: string | null
    birthDate: string | null
    address: string | null
    emergencyContact: string | null
    emergencyPhone: string | null
    medicalConditions: string | null
    allergies: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    email: string | null
    phone: string | null
    role: string | null
    password: string | null
    birthDate: string | null
    address: string | null
    emergencyContact: string | null
    emergencyPhone: string | null
    medicalConditions: string | null
    allergies: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    email: number
    phone: number
    role: number
    password: number
    birthDate: number
    address: number
    emergencyContact: number
    emergencyPhone: number
    medicalConditions: number
    allergies: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    phone?: true
    role?: true
    password?: true
    birthDate?: true
    address?: true
    emergencyContact?: true
    emergencyPhone?: true
    medicalConditions?: true
    allergies?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    phone?: true
    role?: true
    password?: true
    birthDate?: true
    address?: true
    emergencyContact?: true
    emergencyPhone?: true
    medicalConditions?: true
    allergies?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    email?: true
    phone?: true
    role?: true
    password?: true
    birthDate?: true
    address?: true
    emergencyContact?: true
    emergencyPhone?: true
    medicalConditions?: true
    allergies?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    firstName: string
    lastName: string
    email: string | null
    phone: string | null
    role: string
    password: string | null
    birthDate: string | null
    address: string | null
    emergencyContact: string | null
    emergencyPhone: string | null
    medicalConditions: string | null
    allergies: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phone?: boolean
    role?: boolean
    password?: boolean
    birthDate?: boolean
    address?: boolean
    emergencyContact?: boolean
    emergencyPhone?: boolean
    medicalConditions?: boolean
    allergies?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    medications?: boolean | User$medicationsArgs<ExtArgs>
    patientLinks?: boolean | User$patientLinksArgs<ExtArgs>
    caregiverLinks?: boolean | User$caregiverLinksArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phone?: boolean
    role?: boolean
    password?: boolean
    birthDate?: boolean
    address?: boolean
    emergencyContact?: boolean
    emergencyPhone?: boolean
    medicalConditions?: boolean
    allergies?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phone?: boolean
    role?: boolean
    password?: boolean
    birthDate?: boolean
    address?: boolean
    emergencyContact?: boolean
    emergencyPhone?: boolean
    medicalConditions?: boolean
    allergies?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    email?: boolean
    phone?: boolean
    role?: boolean
    password?: boolean
    birthDate?: boolean
    address?: boolean
    emergencyContact?: boolean
    emergencyPhone?: boolean
    medicalConditions?: boolean
    allergies?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "firstName" | "lastName" | "email" | "phone" | "role" | "password" | "birthDate" | "address" | "emergencyContact" | "emergencyPhone" | "medicalConditions" | "allergies" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    medications?: boolean | User$medicationsArgs<ExtArgs>
    patientLinks?: boolean | User$patientLinksArgs<ExtArgs>
    caregiverLinks?: boolean | User$caregiverLinksArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      medications: Prisma.$MedicationPayload<ExtArgs>[]
      patientLinks: Prisma.$PatientCaregiverPayload<ExtArgs>[]
      caregiverLinks: Prisma.$PatientCaregiverPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      firstName: string
      lastName: string
      email: string | null
      phone: string | null
      role: string
      password: string | null
      birthDate: string | null
      address: string | null
      emergencyContact: string | null
      emergencyPhone: string | null
      medicalConditions: string | null
      allergies: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    medications<T extends User$medicationsArgs<ExtArgs> = {}>(args?: Subset<T, User$medicationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    patientLinks<T extends User$patientLinksArgs<ExtArgs> = {}>(args?: Subset<T, User$patientLinksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientCaregiverPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    caregiverLinks<T extends User$caregiverLinksArgs<ExtArgs> = {}>(args?: Subset<T, User$caregiverLinksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientCaregiverPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly birthDate: FieldRef<"User", 'String'>
    readonly address: FieldRef<"User", 'String'>
    readonly emergencyContact: FieldRef<"User", 'String'>
    readonly emergencyPhone: FieldRef<"User", 'String'>
    readonly medicalConditions: FieldRef<"User", 'String'>
    readonly allergies: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.medications
   */
  export type User$medicationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medication
     */
    select?: MedicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medication
     */
    omit?: MedicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationInclude<ExtArgs> | null
    where?: MedicationWhereInput
    orderBy?: MedicationOrderByWithRelationInput | MedicationOrderByWithRelationInput[]
    cursor?: MedicationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MedicationScalarFieldEnum | MedicationScalarFieldEnum[]
  }

  /**
   * User.patientLinks
   */
  export type User$patientLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCaregiver
     */
    select?: PatientCaregiverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientCaregiver
     */
    omit?: PatientCaregiverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientCaregiverInclude<ExtArgs> | null
    where?: PatientCaregiverWhereInput
    orderBy?: PatientCaregiverOrderByWithRelationInput | PatientCaregiverOrderByWithRelationInput[]
    cursor?: PatientCaregiverWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientCaregiverScalarFieldEnum | PatientCaregiverScalarFieldEnum[]
  }

  /**
   * User.caregiverLinks
   */
  export type User$caregiverLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCaregiver
     */
    select?: PatientCaregiverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientCaregiver
     */
    omit?: PatientCaregiverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientCaregiverInclude<ExtArgs> | null
    where?: PatientCaregiverWhereInput
    orderBy?: PatientCaregiverOrderByWithRelationInput | PatientCaregiverOrderByWithRelationInput[]
    cursor?: PatientCaregiverWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PatientCaregiverScalarFieldEnum | PatientCaregiverScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Medication
   */

  export type AggregateMedication = {
    _count: MedicationCountAggregateOutputType | null
    _avg: MedicationAvgAggregateOutputType | null
    _sum: MedicationSumAggregateOutputType | null
    _min: MedicationMinAggregateOutputType | null
    _max: MedicationMaxAggregateOutputType | null
  }

  export type MedicationAvgAggregateOutputType = {
    quantity: number | null
  }

  export type MedicationSumAggregateOutputType = {
    quantity: number | null
  }

  export type MedicationMinAggregateOutputType = {
    id: string | null
    patientId: string | null
    name: string | null
    dosage: string | null
    quantity: number | null
    presentation: string | null
    instructions: string | null
    color: string | null
    active: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type MedicationMaxAggregateOutputType = {
    id: string | null
    patientId: string | null
    name: string | null
    dosage: string | null
    quantity: number | null
    presentation: string | null
    instructions: string | null
    color: string | null
    active: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    deletedAt: Date | null
  }

  export type MedicationCountAggregateOutputType = {
    id: number
    patientId: number
    name: number
    dosage: number
    quantity: number
    presentation: number
    instructions: number
    color: number
    active: number
    createdAt: number
    updatedAt: number
    deletedAt: number
    _all: number
  }


  export type MedicationAvgAggregateInputType = {
    quantity?: true
  }

  export type MedicationSumAggregateInputType = {
    quantity?: true
  }

  export type MedicationMinAggregateInputType = {
    id?: true
    patientId?: true
    name?: true
    dosage?: true
    quantity?: true
    presentation?: true
    instructions?: true
    color?: true
    active?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type MedicationMaxAggregateInputType = {
    id?: true
    patientId?: true
    name?: true
    dosage?: true
    quantity?: true
    presentation?: true
    instructions?: true
    color?: true
    active?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
  }

  export type MedicationCountAggregateInputType = {
    id?: true
    patientId?: true
    name?: true
    dosage?: true
    quantity?: true
    presentation?: true
    instructions?: true
    color?: true
    active?: true
    createdAt?: true
    updatedAt?: true
    deletedAt?: true
    _all?: true
  }

  export type MedicationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Medication to aggregate.
     */
    where?: MedicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Medications to fetch.
     */
    orderBy?: MedicationOrderByWithRelationInput | MedicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MedicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Medications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Medications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Medications
    **/
    _count?: true | MedicationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MedicationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MedicationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MedicationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MedicationMaxAggregateInputType
  }

  export type GetMedicationAggregateType<T extends MedicationAggregateArgs> = {
        [P in keyof T & keyof AggregateMedication]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMedication[P]>
      : GetScalarType<T[P], AggregateMedication[P]>
  }




  export type MedicationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MedicationWhereInput
    orderBy?: MedicationOrderByWithAggregationInput | MedicationOrderByWithAggregationInput[]
    by: MedicationScalarFieldEnum[] | MedicationScalarFieldEnum
    having?: MedicationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MedicationCountAggregateInputType | true
    _avg?: MedicationAvgAggregateInputType
    _sum?: MedicationSumAggregateInputType
    _min?: MedicationMinAggregateInputType
    _max?: MedicationMaxAggregateInputType
  }

  export type MedicationGroupByOutputType = {
    id: string
    patientId: string
    name: string
    dosage: string | null
    quantity: number | null
    presentation: string | null
    instructions: string | null
    color: string | null
    active: boolean
    createdAt: Date
    updatedAt: Date
    deletedAt: Date | null
    _count: MedicationCountAggregateOutputType | null
    _avg: MedicationAvgAggregateOutputType | null
    _sum: MedicationSumAggregateOutputType | null
    _min: MedicationMinAggregateOutputType | null
    _max: MedicationMaxAggregateOutputType | null
  }

  type GetMedicationGroupByPayload<T extends MedicationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MedicationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MedicationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MedicationGroupByOutputType[P]>
            : GetScalarType<T[P], MedicationGroupByOutputType[P]>
        }
      >
    >


  export type MedicationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    name?: boolean
    dosage?: boolean
    quantity?: boolean
    presentation?: boolean
    instructions?: boolean
    color?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    patient?: boolean | UserDefaultArgs<ExtArgs>
    schedules?: boolean | Medication$schedulesArgs<ExtArgs>
    intakes?: boolean | Medication$intakesArgs<ExtArgs>
    _count?: boolean | MedicationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medication"]>

  export type MedicationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    name?: boolean
    dosage?: boolean
    quantity?: boolean
    presentation?: boolean
    instructions?: boolean
    color?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    patient?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medication"]>

  export type MedicationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    name?: boolean
    dosage?: boolean
    quantity?: boolean
    presentation?: boolean
    instructions?: boolean
    color?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
    patient?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["medication"]>

  export type MedicationSelectScalar = {
    id?: boolean
    patientId?: boolean
    name?: boolean
    dosage?: boolean
    quantity?: boolean
    presentation?: boolean
    instructions?: boolean
    color?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    deletedAt?: boolean
  }

  export type MedicationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientId" | "name" | "dosage" | "quantity" | "presentation" | "instructions" | "color" | "active" | "createdAt" | "updatedAt" | "deletedAt", ExtArgs["result"]["medication"]>
  export type MedicationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | UserDefaultArgs<ExtArgs>
    schedules?: boolean | Medication$schedulesArgs<ExtArgs>
    intakes?: boolean | Medication$intakesArgs<ExtArgs>
    _count?: boolean | MedicationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MedicationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type MedicationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MedicationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Medication"
    objects: {
      patient: Prisma.$UserPayload<ExtArgs>
      schedules: Prisma.$SchedulePayload<ExtArgs>[]
      intakes: Prisma.$IntakeLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientId: string
      name: string
      dosage: string | null
      quantity: number | null
      presentation: string | null
      instructions: string | null
      color: string | null
      active: boolean
      createdAt: Date
      updatedAt: Date
      deletedAt: Date | null
    }, ExtArgs["result"]["medication"]>
    composites: {}
  }

  type MedicationGetPayload<S extends boolean | null | undefined | MedicationDefaultArgs> = $Result.GetResult<Prisma.$MedicationPayload, S>

  type MedicationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MedicationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MedicationCountAggregateInputType | true
    }

  export interface MedicationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Medication'], meta: { name: 'Medication' } }
    /**
     * Find zero or one Medication that matches the filter.
     * @param {MedicationFindUniqueArgs} args - Arguments to find a Medication
     * @example
     * // Get one Medication
     * const medication = await prisma.medication.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MedicationFindUniqueArgs>(args: SelectSubset<T, MedicationFindUniqueArgs<ExtArgs>>): Prisma__MedicationClient<$Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Medication that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MedicationFindUniqueOrThrowArgs} args - Arguments to find a Medication
     * @example
     * // Get one Medication
     * const medication = await prisma.medication.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MedicationFindUniqueOrThrowArgs>(args: SelectSubset<T, MedicationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MedicationClient<$Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Medication that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicationFindFirstArgs} args - Arguments to find a Medication
     * @example
     * // Get one Medication
     * const medication = await prisma.medication.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MedicationFindFirstArgs>(args?: SelectSubset<T, MedicationFindFirstArgs<ExtArgs>>): Prisma__MedicationClient<$Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Medication that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicationFindFirstOrThrowArgs} args - Arguments to find a Medication
     * @example
     * // Get one Medication
     * const medication = await prisma.medication.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MedicationFindFirstOrThrowArgs>(args?: SelectSubset<T, MedicationFindFirstOrThrowArgs<ExtArgs>>): Prisma__MedicationClient<$Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Medications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Medications
     * const medications = await prisma.medication.findMany()
     * 
     * // Get first 10 Medications
     * const medications = await prisma.medication.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const medicationWithIdOnly = await prisma.medication.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MedicationFindManyArgs>(args?: SelectSubset<T, MedicationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Medication.
     * @param {MedicationCreateArgs} args - Arguments to create a Medication.
     * @example
     * // Create one Medication
     * const Medication = await prisma.medication.create({
     *   data: {
     *     // ... data to create a Medication
     *   }
     * })
     * 
     */
    create<T extends MedicationCreateArgs>(args: SelectSubset<T, MedicationCreateArgs<ExtArgs>>): Prisma__MedicationClient<$Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Medications.
     * @param {MedicationCreateManyArgs} args - Arguments to create many Medications.
     * @example
     * // Create many Medications
     * const medication = await prisma.medication.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MedicationCreateManyArgs>(args?: SelectSubset<T, MedicationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Medications and returns the data saved in the database.
     * @param {MedicationCreateManyAndReturnArgs} args - Arguments to create many Medications.
     * @example
     * // Create many Medications
     * const medication = await prisma.medication.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Medications and only return the `id`
     * const medicationWithIdOnly = await prisma.medication.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MedicationCreateManyAndReturnArgs>(args?: SelectSubset<T, MedicationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Medication.
     * @param {MedicationDeleteArgs} args - Arguments to delete one Medication.
     * @example
     * // Delete one Medication
     * const Medication = await prisma.medication.delete({
     *   where: {
     *     // ... filter to delete one Medication
     *   }
     * })
     * 
     */
    delete<T extends MedicationDeleteArgs>(args: SelectSubset<T, MedicationDeleteArgs<ExtArgs>>): Prisma__MedicationClient<$Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Medication.
     * @param {MedicationUpdateArgs} args - Arguments to update one Medication.
     * @example
     * // Update one Medication
     * const medication = await prisma.medication.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MedicationUpdateArgs>(args: SelectSubset<T, MedicationUpdateArgs<ExtArgs>>): Prisma__MedicationClient<$Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Medications.
     * @param {MedicationDeleteManyArgs} args - Arguments to filter Medications to delete.
     * @example
     * // Delete a few Medications
     * const { count } = await prisma.medication.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MedicationDeleteManyArgs>(args?: SelectSubset<T, MedicationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Medications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Medications
     * const medication = await prisma.medication.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MedicationUpdateManyArgs>(args: SelectSubset<T, MedicationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Medications and returns the data updated in the database.
     * @param {MedicationUpdateManyAndReturnArgs} args - Arguments to update many Medications.
     * @example
     * // Update many Medications
     * const medication = await prisma.medication.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Medications and only return the `id`
     * const medicationWithIdOnly = await prisma.medication.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MedicationUpdateManyAndReturnArgs>(args: SelectSubset<T, MedicationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Medication.
     * @param {MedicationUpsertArgs} args - Arguments to update or create a Medication.
     * @example
     * // Update or create a Medication
     * const medication = await prisma.medication.upsert({
     *   create: {
     *     // ... data to create a Medication
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Medication we want to update
     *   }
     * })
     */
    upsert<T extends MedicationUpsertArgs>(args: SelectSubset<T, MedicationUpsertArgs<ExtArgs>>): Prisma__MedicationClient<$Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Medications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicationCountArgs} args - Arguments to filter Medications to count.
     * @example
     * // Count the number of Medications
     * const count = await prisma.medication.count({
     *   where: {
     *     // ... the filter for the Medications we want to count
     *   }
     * })
    **/
    count<T extends MedicationCountArgs>(
      args?: Subset<T, MedicationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MedicationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Medication.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MedicationAggregateArgs>(args: Subset<T, MedicationAggregateArgs>): Prisma.PrismaPromise<GetMedicationAggregateType<T>>

    /**
     * Group by Medication.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MedicationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MedicationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MedicationGroupByArgs['orderBy'] }
        : { orderBy?: MedicationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MedicationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMedicationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Medication model
   */
  readonly fields: MedicationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Medication.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MedicationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    schedules<T extends Medication$schedulesArgs<ExtArgs> = {}>(args?: Subset<T, Medication$schedulesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    intakes<T extends Medication$intakesArgs<ExtArgs> = {}>(args?: Subset<T, Medication$intakesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IntakeLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Medication model
   */
  interface MedicationFieldRefs {
    readonly id: FieldRef<"Medication", 'String'>
    readonly patientId: FieldRef<"Medication", 'String'>
    readonly name: FieldRef<"Medication", 'String'>
    readonly dosage: FieldRef<"Medication", 'String'>
    readonly quantity: FieldRef<"Medication", 'Int'>
    readonly presentation: FieldRef<"Medication", 'String'>
    readonly instructions: FieldRef<"Medication", 'String'>
    readonly color: FieldRef<"Medication", 'String'>
    readonly active: FieldRef<"Medication", 'Boolean'>
    readonly createdAt: FieldRef<"Medication", 'DateTime'>
    readonly updatedAt: FieldRef<"Medication", 'DateTime'>
    readonly deletedAt: FieldRef<"Medication", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Medication findUnique
   */
  export type MedicationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medication
     */
    select?: MedicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medication
     */
    omit?: MedicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationInclude<ExtArgs> | null
    /**
     * Filter, which Medication to fetch.
     */
    where: MedicationWhereUniqueInput
  }

  /**
   * Medication findUniqueOrThrow
   */
  export type MedicationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medication
     */
    select?: MedicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medication
     */
    omit?: MedicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationInclude<ExtArgs> | null
    /**
     * Filter, which Medication to fetch.
     */
    where: MedicationWhereUniqueInput
  }

  /**
   * Medication findFirst
   */
  export type MedicationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medication
     */
    select?: MedicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medication
     */
    omit?: MedicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationInclude<ExtArgs> | null
    /**
     * Filter, which Medication to fetch.
     */
    where?: MedicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Medications to fetch.
     */
    orderBy?: MedicationOrderByWithRelationInput | MedicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Medications.
     */
    cursor?: MedicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Medications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Medications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Medications.
     */
    distinct?: MedicationScalarFieldEnum | MedicationScalarFieldEnum[]
  }

  /**
   * Medication findFirstOrThrow
   */
  export type MedicationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medication
     */
    select?: MedicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medication
     */
    omit?: MedicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationInclude<ExtArgs> | null
    /**
     * Filter, which Medication to fetch.
     */
    where?: MedicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Medications to fetch.
     */
    orderBy?: MedicationOrderByWithRelationInput | MedicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Medications.
     */
    cursor?: MedicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Medications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Medications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Medications.
     */
    distinct?: MedicationScalarFieldEnum | MedicationScalarFieldEnum[]
  }

  /**
   * Medication findMany
   */
  export type MedicationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medication
     */
    select?: MedicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medication
     */
    omit?: MedicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationInclude<ExtArgs> | null
    /**
     * Filter, which Medications to fetch.
     */
    where?: MedicationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Medications to fetch.
     */
    orderBy?: MedicationOrderByWithRelationInput | MedicationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Medications.
     */
    cursor?: MedicationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Medications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Medications.
     */
    skip?: number
    distinct?: MedicationScalarFieldEnum | MedicationScalarFieldEnum[]
  }

  /**
   * Medication create
   */
  export type MedicationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medication
     */
    select?: MedicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medication
     */
    omit?: MedicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationInclude<ExtArgs> | null
    /**
     * The data needed to create a Medication.
     */
    data: XOR<MedicationCreateInput, MedicationUncheckedCreateInput>
  }

  /**
   * Medication createMany
   */
  export type MedicationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Medications.
     */
    data: MedicationCreateManyInput | MedicationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Medication createManyAndReturn
   */
  export type MedicationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medication
     */
    select?: MedicationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Medication
     */
    omit?: MedicationOmit<ExtArgs> | null
    /**
     * The data used to create many Medications.
     */
    data: MedicationCreateManyInput | MedicationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Medication update
   */
  export type MedicationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medication
     */
    select?: MedicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medication
     */
    omit?: MedicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationInclude<ExtArgs> | null
    /**
     * The data needed to update a Medication.
     */
    data: XOR<MedicationUpdateInput, MedicationUncheckedUpdateInput>
    /**
     * Choose, which Medication to update.
     */
    where: MedicationWhereUniqueInput
  }

  /**
   * Medication updateMany
   */
  export type MedicationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Medications.
     */
    data: XOR<MedicationUpdateManyMutationInput, MedicationUncheckedUpdateManyInput>
    /**
     * Filter which Medications to update
     */
    where?: MedicationWhereInput
    /**
     * Limit how many Medications to update.
     */
    limit?: number
  }

  /**
   * Medication updateManyAndReturn
   */
  export type MedicationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medication
     */
    select?: MedicationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Medication
     */
    omit?: MedicationOmit<ExtArgs> | null
    /**
     * The data used to update Medications.
     */
    data: XOR<MedicationUpdateManyMutationInput, MedicationUncheckedUpdateManyInput>
    /**
     * Filter which Medications to update
     */
    where?: MedicationWhereInput
    /**
     * Limit how many Medications to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Medication upsert
   */
  export type MedicationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medication
     */
    select?: MedicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medication
     */
    omit?: MedicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationInclude<ExtArgs> | null
    /**
     * The filter to search for the Medication to update in case it exists.
     */
    where: MedicationWhereUniqueInput
    /**
     * In case the Medication found by the `where` argument doesn't exist, create a new Medication with this data.
     */
    create: XOR<MedicationCreateInput, MedicationUncheckedCreateInput>
    /**
     * In case the Medication was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MedicationUpdateInput, MedicationUncheckedUpdateInput>
  }

  /**
   * Medication delete
   */
  export type MedicationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medication
     */
    select?: MedicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medication
     */
    omit?: MedicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationInclude<ExtArgs> | null
    /**
     * Filter which Medication to delete.
     */
    where: MedicationWhereUniqueInput
  }

  /**
   * Medication deleteMany
   */
  export type MedicationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Medications to delete
     */
    where?: MedicationWhereInput
    /**
     * Limit how many Medications to delete.
     */
    limit?: number
  }

  /**
   * Medication.schedules
   */
  export type Medication$schedulesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    where?: ScheduleWhereInput
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    cursor?: ScheduleWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Medication.intakes
   */
  export type Medication$intakesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntakeLog
     */
    select?: IntakeLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntakeLog
     */
    omit?: IntakeLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntakeLogInclude<ExtArgs> | null
    where?: IntakeLogWhereInput
    orderBy?: IntakeLogOrderByWithRelationInput | IntakeLogOrderByWithRelationInput[]
    cursor?: IntakeLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IntakeLogScalarFieldEnum | IntakeLogScalarFieldEnum[]
  }

  /**
   * Medication without action
   */
  export type MedicationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Medication
     */
    select?: MedicationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Medication
     */
    omit?: MedicationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MedicationInclude<ExtArgs> | null
  }


  /**
   * Model Schedule
   */

  export type AggregateSchedule = {
    _count: ScheduleCountAggregateOutputType | null
    _avg: ScheduleAvgAggregateOutputType | null
    _sum: ScheduleSumAggregateOutputType | null
    _min: ScheduleMinAggregateOutputType | null
    _max: ScheduleMaxAggregateOutputType | null
  }

  export type ScheduleAvgAggregateOutputType = {
    frequencyValue: number | null
  }

  export type ScheduleSumAggregateOutputType = {
    frequencyValue: number | null
  }

  export type ScheduleMinAggregateOutputType = {
    id: string | null
    medicationId: string | null
    time: string | null
    frequencyType: string | null
    frequencyValue: number | null
    daysOfWeek: string | null
    endDate: string | null
    active: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScheduleMaxAggregateOutputType = {
    id: string | null
    medicationId: string | null
    time: string | null
    frequencyType: string | null
    frequencyValue: number | null
    daysOfWeek: string | null
    endDate: string | null
    active: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ScheduleCountAggregateOutputType = {
    id: number
    medicationId: number
    time: number
    frequencyType: number
    frequencyValue: number
    daysOfWeek: number
    endDate: number
    active: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ScheduleAvgAggregateInputType = {
    frequencyValue?: true
  }

  export type ScheduleSumAggregateInputType = {
    frequencyValue?: true
  }

  export type ScheduleMinAggregateInputType = {
    id?: true
    medicationId?: true
    time?: true
    frequencyType?: true
    frequencyValue?: true
    daysOfWeek?: true
    endDate?: true
    active?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScheduleMaxAggregateInputType = {
    id?: true
    medicationId?: true
    time?: true
    frequencyType?: true
    frequencyValue?: true
    daysOfWeek?: true
    endDate?: true
    active?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ScheduleCountAggregateInputType = {
    id?: true
    medicationId?: true
    time?: true
    frequencyType?: true
    frequencyValue?: true
    daysOfWeek?: true
    endDate?: true
    active?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ScheduleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Schedule to aggregate.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Schedules
    **/
    _count?: true | ScheduleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ScheduleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ScheduleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScheduleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScheduleMaxAggregateInputType
  }

  export type GetScheduleAggregateType<T extends ScheduleAggregateArgs> = {
        [P in keyof T & keyof AggregateSchedule]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSchedule[P]>
      : GetScalarType<T[P], AggregateSchedule[P]>
  }




  export type ScheduleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScheduleWhereInput
    orderBy?: ScheduleOrderByWithAggregationInput | ScheduleOrderByWithAggregationInput[]
    by: ScheduleScalarFieldEnum[] | ScheduleScalarFieldEnum
    having?: ScheduleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScheduleCountAggregateInputType | true
    _avg?: ScheduleAvgAggregateInputType
    _sum?: ScheduleSumAggregateInputType
    _min?: ScheduleMinAggregateInputType
    _max?: ScheduleMaxAggregateInputType
  }

  export type ScheduleGroupByOutputType = {
    id: string
    medicationId: string
    time: string
    frequencyType: string
    frequencyValue: number | null
    daysOfWeek: string | null
    endDate: string | null
    active: boolean
    createdAt: Date
    updatedAt: Date
    _count: ScheduleCountAggregateOutputType | null
    _avg: ScheduleAvgAggregateOutputType | null
    _sum: ScheduleSumAggregateOutputType | null
    _min: ScheduleMinAggregateOutputType | null
    _max: ScheduleMaxAggregateOutputType | null
  }

  type GetScheduleGroupByPayload<T extends ScheduleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScheduleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScheduleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScheduleGroupByOutputType[P]>
            : GetScalarType<T[P], ScheduleGroupByOutputType[P]>
        }
      >
    >


  export type ScheduleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    medicationId?: boolean
    time?: boolean
    frequencyType?: boolean
    frequencyValue?: boolean
    daysOfWeek?: boolean
    endDate?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    medication?: boolean | MedicationDefaultArgs<ExtArgs>
    intakes?: boolean | Schedule$intakesArgs<ExtArgs>
    _count?: boolean | ScheduleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["schedule"]>

  export type ScheduleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    medicationId?: boolean
    time?: boolean
    frequencyType?: boolean
    frequencyValue?: boolean
    daysOfWeek?: boolean
    endDate?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    medication?: boolean | MedicationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["schedule"]>

  export type ScheduleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    medicationId?: boolean
    time?: boolean
    frequencyType?: boolean
    frequencyValue?: boolean
    daysOfWeek?: boolean
    endDate?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    medication?: boolean | MedicationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["schedule"]>

  export type ScheduleSelectScalar = {
    id?: boolean
    medicationId?: boolean
    time?: boolean
    frequencyType?: boolean
    frequencyValue?: boolean
    daysOfWeek?: boolean
    endDate?: boolean
    active?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ScheduleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "medicationId" | "time" | "frequencyType" | "frequencyValue" | "daysOfWeek" | "endDate" | "active" | "createdAt" | "updatedAt", ExtArgs["result"]["schedule"]>
  export type ScheduleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    medication?: boolean | MedicationDefaultArgs<ExtArgs>
    intakes?: boolean | Schedule$intakesArgs<ExtArgs>
    _count?: boolean | ScheduleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ScheduleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    medication?: boolean | MedicationDefaultArgs<ExtArgs>
  }
  export type ScheduleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    medication?: boolean | MedicationDefaultArgs<ExtArgs>
  }

  export type $SchedulePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Schedule"
    objects: {
      medication: Prisma.$MedicationPayload<ExtArgs>
      intakes: Prisma.$IntakeLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      medicationId: string
      time: string
      frequencyType: string
      frequencyValue: number | null
      daysOfWeek: string | null
      endDate: string | null
      active: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["schedule"]>
    composites: {}
  }

  type ScheduleGetPayload<S extends boolean | null | undefined | ScheduleDefaultArgs> = $Result.GetResult<Prisma.$SchedulePayload, S>

  type ScheduleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ScheduleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ScheduleCountAggregateInputType | true
    }

  export interface ScheduleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Schedule'], meta: { name: 'Schedule' } }
    /**
     * Find zero or one Schedule that matches the filter.
     * @param {ScheduleFindUniqueArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScheduleFindUniqueArgs>(args: SelectSubset<T, ScheduleFindUniqueArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Schedule that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ScheduleFindUniqueOrThrowArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScheduleFindUniqueOrThrowArgs>(args: SelectSubset<T, ScheduleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Schedule that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleFindFirstArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScheduleFindFirstArgs>(args?: SelectSubset<T, ScheduleFindFirstArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Schedule that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleFindFirstOrThrowArgs} args - Arguments to find a Schedule
     * @example
     * // Get one Schedule
     * const schedule = await prisma.schedule.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScheduleFindFirstOrThrowArgs>(args?: SelectSubset<T, ScheduleFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Schedules that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Schedules
     * const schedules = await prisma.schedule.findMany()
     * 
     * // Get first 10 Schedules
     * const schedules = await prisma.schedule.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scheduleWithIdOnly = await prisma.schedule.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScheduleFindManyArgs>(args?: SelectSubset<T, ScheduleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Schedule.
     * @param {ScheduleCreateArgs} args - Arguments to create a Schedule.
     * @example
     * // Create one Schedule
     * const Schedule = await prisma.schedule.create({
     *   data: {
     *     // ... data to create a Schedule
     *   }
     * })
     * 
     */
    create<T extends ScheduleCreateArgs>(args: SelectSubset<T, ScheduleCreateArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Schedules.
     * @param {ScheduleCreateManyArgs} args - Arguments to create many Schedules.
     * @example
     * // Create many Schedules
     * const schedule = await prisma.schedule.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScheduleCreateManyArgs>(args?: SelectSubset<T, ScheduleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Schedules and returns the data saved in the database.
     * @param {ScheduleCreateManyAndReturnArgs} args - Arguments to create many Schedules.
     * @example
     * // Create many Schedules
     * const schedule = await prisma.schedule.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Schedules and only return the `id`
     * const scheduleWithIdOnly = await prisma.schedule.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ScheduleCreateManyAndReturnArgs>(args?: SelectSubset<T, ScheduleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Schedule.
     * @param {ScheduleDeleteArgs} args - Arguments to delete one Schedule.
     * @example
     * // Delete one Schedule
     * const Schedule = await prisma.schedule.delete({
     *   where: {
     *     // ... filter to delete one Schedule
     *   }
     * })
     * 
     */
    delete<T extends ScheduleDeleteArgs>(args: SelectSubset<T, ScheduleDeleteArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Schedule.
     * @param {ScheduleUpdateArgs} args - Arguments to update one Schedule.
     * @example
     * // Update one Schedule
     * const schedule = await prisma.schedule.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScheduleUpdateArgs>(args: SelectSubset<T, ScheduleUpdateArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Schedules.
     * @param {ScheduleDeleteManyArgs} args - Arguments to filter Schedules to delete.
     * @example
     * // Delete a few Schedules
     * const { count } = await prisma.schedule.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScheduleDeleteManyArgs>(args?: SelectSubset<T, ScheduleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Schedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Schedules
     * const schedule = await prisma.schedule.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScheduleUpdateManyArgs>(args: SelectSubset<T, ScheduleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Schedules and returns the data updated in the database.
     * @param {ScheduleUpdateManyAndReturnArgs} args - Arguments to update many Schedules.
     * @example
     * // Update many Schedules
     * const schedule = await prisma.schedule.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Schedules and only return the `id`
     * const scheduleWithIdOnly = await prisma.schedule.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ScheduleUpdateManyAndReturnArgs>(args: SelectSubset<T, ScheduleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Schedule.
     * @param {ScheduleUpsertArgs} args - Arguments to update or create a Schedule.
     * @example
     * // Update or create a Schedule
     * const schedule = await prisma.schedule.upsert({
     *   create: {
     *     // ... data to create a Schedule
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Schedule we want to update
     *   }
     * })
     */
    upsert<T extends ScheduleUpsertArgs>(args: SelectSubset<T, ScheduleUpsertArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Schedules.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleCountArgs} args - Arguments to filter Schedules to count.
     * @example
     * // Count the number of Schedules
     * const count = await prisma.schedule.count({
     *   where: {
     *     // ... the filter for the Schedules we want to count
     *   }
     * })
    **/
    count<T extends ScheduleCountArgs>(
      args?: Subset<T, ScheduleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScheduleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Schedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScheduleAggregateArgs>(args: Subset<T, ScheduleAggregateArgs>): Prisma.PrismaPromise<GetScheduleAggregateType<T>>

    /**
     * Group by Schedule.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScheduleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScheduleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScheduleGroupByArgs['orderBy'] }
        : { orderBy?: ScheduleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScheduleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScheduleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Schedule model
   */
  readonly fields: ScheduleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Schedule.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScheduleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    medication<T extends MedicationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MedicationDefaultArgs<ExtArgs>>): Prisma__MedicationClient<$Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    intakes<T extends Schedule$intakesArgs<ExtArgs> = {}>(args?: Subset<T, Schedule$intakesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IntakeLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Schedule model
   */
  interface ScheduleFieldRefs {
    readonly id: FieldRef<"Schedule", 'String'>
    readonly medicationId: FieldRef<"Schedule", 'String'>
    readonly time: FieldRef<"Schedule", 'String'>
    readonly frequencyType: FieldRef<"Schedule", 'String'>
    readonly frequencyValue: FieldRef<"Schedule", 'Int'>
    readonly daysOfWeek: FieldRef<"Schedule", 'String'>
    readonly endDate: FieldRef<"Schedule", 'String'>
    readonly active: FieldRef<"Schedule", 'Boolean'>
    readonly createdAt: FieldRef<"Schedule", 'DateTime'>
    readonly updatedAt: FieldRef<"Schedule", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Schedule findUnique
   */
  export type ScheduleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule findUniqueOrThrow
   */
  export type ScheduleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule findFirst
   */
  export type ScheduleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schedules.
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schedules.
     */
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Schedule findFirstOrThrow
   */
  export type ScheduleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedule to fetch.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Schedules.
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Schedules.
     */
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Schedule findMany
   */
  export type ScheduleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter, which Schedules to fetch.
     */
    where?: ScheduleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Schedules to fetch.
     */
    orderBy?: ScheduleOrderByWithRelationInput | ScheduleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Schedules.
     */
    cursor?: ScheduleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Schedules from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Schedules.
     */
    skip?: number
    distinct?: ScheduleScalarFieldEnum | ScheduleScalarFieldEnum[]
  }

  /**
   * Schedule create
   */
  export type ScheduleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * The data needed to create a Schedule.
     */
    data: XOR<ScheduleCreateInput, ScheduleUncheckedCreateInput>
  }

  /**
   * Schedule createMany
   */
  export type ScheduleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Schedules.
     */
    data: ScheduleCreateManyInput | ScheduleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Schedule createManyAndReturn
   */
  export type ScheduleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * The data used to create many Schedules.
     */
    data: ScheduleCreateManyInput | ScheduleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Schedule update
   */
  export type ScheduleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * The data needed to update a Schedule.
     */
    data: XOR<ScheduleUpdateInput, ScheduleUncheckedUpdateInput>
    /**
     * Choose, which Schedule to update.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule updateMany
   */
  export type ScheduleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Schedules.
     */
    data: XOR<ScheduleUpdateManyMutationInput, ScheduleUncheckedUpdateManyInput>
    /**
     * Filter which Schedules to update
     */
    where?: ScheduleWhereInput
    /**
     * Limit how many Schedules to update.
     */
    limit?: number
  }

  /**
   * Schedule updateManyAndReturn
   */
  export type ScheduleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * The data used to update Schedules.
     */
    data: XOR<ScheduleUpdateManyMutationInput, ScheduleUncheckedUpdateManyInput>
    /**
     * Filter which Schedules to update
     */
    where?: ScheduleWhereInput
    /**
     * Limit how many Schedules to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Schedule upsert
   */
  export type ScheduleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * The filter to search for the Schedule to update in case it exists.
     */
    where: ScheduleWhereUniqueInput
    /**
     * In case the Schedule found by the `where` argument doesn't exist, create a new Schedule with this data.
     */
    create: XOR<ScheduleCreateInput, ScheduleUncheckedCreateInput>
    /**
     * In case the Schedule was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScheduleUpdateInput, ScheduleUncheckedUpdateInput>
  }

  /**
   * Schedule delete
   */
  export type ScheduleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    /**
     * Filter which Schedule to delete.
     */
    where: ScheduleWhereUniqueInput
  }

  /**
   * Schedule deleteMany
   */
  export type ScheduleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Schedules to delete
     */
    where?: ScheduleWhereInput
    /**
     * Limit how many Schedules to delete.
     */
    limit?: number
  }

  /**
   * Schedule.intakes
   */
  export type Schedule$intakesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntakeLog
     */
    select?: IntakeLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntakeLog
     */
    omit?: IntakeLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntakeLogInclude<ExtArgs> | null
    where?: IntakeLogWhereInput
    orderBy?: IntakeLogOrderByWithRelationInput | IntakeLogOrderByWithRelationInput[]
    cursor?: IntakeLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: IntakeLogScalarFieldEnum | IntakeLogScalarFieldEnum[]
  }

  /**
   * Schedule without action
   */
  export type ScheduleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
  }


  /**
   * Model IntakeLog
   */

  export type AggregateIntakeLog = {
    _count: IntakeLogCountAggregateOutputType | null
    _min: IntakeLogMinAggregateOutputType | null
    _max: IntakeLogMaxAggregateOutputType | null
  }

  export type IntakeLogMinAggregateOutputType = {
    id: string | null
    medicationId: string | null
    scheduleId: string | null
    scheduledFor: Date | null
    action: string | null
    actionAt: Date | null
    note: string | null
    createdAt: Date | null
  }

  export type IntakeLogMaxAggregateOutputType = {
    id: string | null
    medicationId: string | null
    scheduleId: string | null
    scheduledFor: Date | null
    action: string | null
    actionAt: Date | null
    note: string | null
    createdAt: Date | null
  }

  export type IntakeLogCountAggregateOutputType = {
    id: number
    medicationId: number
    scheduleId: number
    scheduledFor: number
    action: number
    actionAt: number
    note: number
    createdAt: number
    _all: number
  }


  export type IntakeLogMinAggregateInputType = {
    id?: true
    medicationId?: true
    scheduleId?: true
    scheduledFor?: true
    action?: true
    actionAt?: true
    note?: true
    createdAt?: true
  }

  export type IntakeLogMaxAggregateInputType = {
    id?: true
    medicationId?: true
    scheduleId?: true
    scheduledFor?: true
    action?: true
    actionAt?: true
    note?: true
    createdAt?: true
  }

  export type IntakeLogCountAggregateInputType = {
    id?: true
    medicationId?: true
    scheduleId?: true
    scheduledFor?: true
    action?: true
    actionAt?: true
    note?: true
    createdAt?: true
    _all?: true
  }

  export type IntakeLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which IntakeLog to aggregate.
     */
    where?: IntakeLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IntakeLogs to fetch.
     */
    orderBy?: IntakeLogOrderByWithRelationInput | IntakeLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: IntakeLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IntakeLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IntakeLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned IntakeLogs
    **/
    _count?: true | IntakeLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: IntakeLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: IntakeLogMaxAggregateInputType
  }

  export type GetIntakeLogAggregateType<T extends IntakeLogAggregateArgs> = {
        [P in keyof T & keyof AggregateIntakeLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateIntakeLog[P]>
      : GetScalarType<T[P], AggregateIntakeLog[P]>
  }




  export type IntakeLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: IntakeLogWhereInput
    orderBy?: IntakeLogOrderByWithAggregationInput | IntakeLogOrderByWithAggregationInput[]
    by: IntakeLogScalarFieldEnum[] | IntakeLogScalarFieldEnum
    having?: IntakeLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: IntakeLogCountAggregateInputType | true
    _min?: IntakeLogMinAggregateInputType
    _max?: IntakeLogMaxAggregateInputType
  }

  export type IntakeLogGroupByOutputType = {
    id: string
    medicationId: string
    scheduleId: string | null
    scheduledFor: Date
    action: string
    actionAt: Date
    note: string | null
    createdAt: Date
    _count: IntakeLogCountAggregateOutputType | null
    _min: IntakeLogMinAggregateOutputType | null
    _max: IntakeLogMaxAggregateOutputType | null
  }

  type GetIntakeLogGroupByPayload<T extends IntakeLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<IntakeLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof IntakeLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], IntakeLogGroupByOutputType[P]>
            : GetScalarType<T[P], IntakeLogGroupByOutputType[P]>
        }
      >
    >


  export type IntakeLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    medicationId?: boolean
    scheduleId?: boolean
    scheduledFor?: boolean
    action?: boolean
    actionAt?: boolean
    note?: boolean
    createdAt?: boolean
    medication?: boolean | MedicationDefaultArgs<ExtArgs>
    schedule?: boolean | IntakeLog$scheduleArgs<ExtArgs>
  }, ExtArgs["result"]["intakeLog"]>

  export type IntakeLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    medicationId?: boolean
    scheduleId?: boolean
    scheduledFor?: boolean
    action?: boolean
    actionAt?: boolean
    note?: boolean
    createdAt?: boolean
    medication?: boolean | MedicationDefaultArgs<ExtArgs>
    schedule?: boolean | IntakeLog$scheduleArgs<ExtArgs>
  }, ExtArgs["result"]["intakeLog"]>

  export type IntakeLogSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    medicationId?: boolean
    scheduleId?: boolean
    scheduledFor?: boolean
    action?: boolean
    actionAt?: boolean
    note?: boolean
    createdAt?: boolean
    medication?: boolean | MedicationDefaultArgs<ExtArgs>
    schedule?: boolean | IntakeLog$scheduleArgs<ExtArgs>
  }, ExtArgs["result"]["intakeLog"]>

  export type IntakeLogSelectScalar = {
    id?: boolean
    medicationId?: boolean
    scheduleId?: boolean
    scheduledFor?: boolean
    action?: boolean
    actionAt?: boolean
    note?: boolean
    createdAt?: boolean
  }

  export type IntakeLogOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "medicationId" | "scheduleId" | "scheduledFor" | "action" | "actionAt" | "note" | "createdAt", ExtArgs["result"]["intakeLog"]>
  export type IntakeLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    medication?: boolean | MedicationDefaultArgs<ExtArgs>
    schedule?: boolean | IntakeLog$scheduleArgs<ExtArgs>
  }
  export type IntakeLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    medication?: boolean | MedicationDefaultArgs<ExtArgs>
    schedule?: boolean | IntakeLog$scheduleArgs<ExtArgs>
  }
  export type IntakeLogIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    medication?: boolean | MedicationDefaultArgs<ExtArgs>
    schedule?: boolean | IntakeLog$scheduleArgs<ExtArgs>
  }

  export type $IntakeLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "IntakeLog"
    objects: {
      medication: Prisma.$MedicationPayload<ExtArgs>
      schedule: Prisma.$SchedulePayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      medicationId: string
      scheduleId: string | null
      scheduledFor: Date
      action: string
      actionAt: Date
      note: string | null
      createdAt: Date
    }, ExtArgs["result"]["intakeLog"]>
    composites: {}
  }

  type IntakeLogGetPayload<S extends boolean | null | undefined | IntakeLogDefaultArgs> = $Result.GetResult<Prisma.$IntakeLogPayload, S>

  type IntakeLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<IntakeLogFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: IntakeLogCountAggregateInputType | true
    }

  export interface IntakeLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['IntakeLog'], meta: { name: 'IntakeLog' } }
    /**
     * Find zero or one IntakeLog that matches the filter.
     * @param {IntakeLogFindUniqueArgs} args - Arguments to find a IntakeLog
     * @example
     * // Get one IntakeLog
     * const intakeLog = await prisma.intakeLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends IntakeLogFindUniqueArgs>(args: SelectSubset<T, IntakeLogFindUniqueArgs<ExtArgs>>): Prisma__IntakeLogClient<$Result.GetResult<Prisma.$IntakeLogPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one IntakeLog that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {IntakeLogFindUniqueOrThrowArgs} args - Arguments to find a IntakeLog
     * @example
     * // Get one IntakeLog
     * const intakeLog = await prisma.intakeLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends IntakeLogFindUniqueOrThrowArgs>(args: SelectSubset<T, IntakeLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__IntakeLogClient<$Result.GetResult<Prisma.$IntakeLogPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first IntakeLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntakeLogFindFirstArgs} args - Arguments to find a IntakeLog
     * @example
     * // Get one IntakeLog
     * const intakeLog = await prisma.intakeLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends IntakeLogFindFirstArgs>(args?: SelectSubset<T, IntakeLogFindFirstArgs<ExtArgs>>): Prisma__IntakeLogClient<$Result.GetResult<Prisma.$IntakeLogPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first IntakeLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntakeLogFindFirstOrThrowArgs} args - Arguments to find a IntakeLog
     * @example
     * // Get one IntakeLog
     * const intakeLog = await prisma.intakeLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends IntakeLogFindFirstOrThrowArgs>(args?: SelectSubset<T, IntakeLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__IntakeLogClient<$Result.GetResult<Prisma.$IntakeLogPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more IntakeLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntakeLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all IntakeLogs
     * const intakeLogs = await prisma.intakeLog.findMany()
     * 
     * // Get first 10 IntakeLogs
     * const intakeLogs = await prisma.intakeLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const intakeLogWithIdOnly = await prisma.intakeLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends IntakeLogFindManyArgs>(args?: SelectSubset<T, IntakeLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IntakeLogPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a IntakeLog.
     * @param {IntakeLogCreateArgs} args - Arguments to create a IntakeLog.
     * @example
     * // Create one IntakeLog
     * const IntakeLog = await prisma.intakeLog.create({
     *   data: {
     *     // ... data to create a IntakeLog
     *   }
     * })
     * 
     */
    create<T extends IntakeLogCreateArgs>(args: SelectSubset<T, IntakeLogCreateArgs<ExtArgs>>): Prisma__IntakeLogClient<$Result.GetResult<Prisma.$IntakeLogPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many IntakeLogs.
     * @param {IntakeLogCreateManyArgs} args - Arguments to create many IntakeLogs.
     * @example
     * // Create many IntakeLogs
     * const intakeLog = await prisma.intakeLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends IntakeLogCreateManyArgs>(args?: SelectSubset<T, IntakeLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many IntakeLogs and returns the data saved in the database.
     * @param {IntakeLogCreateManyAndReturnArgs} args - Arguments to create many IntakeLogs.
     * @example
     * // Create many IntakeLogs
     * const intakeLog = await prisma.intakeLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many IntakeLogs and only return the `id`
     * const intakeLogWithIdOnly = await prisma.intakeLog.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends IntakeLogCreateManyAndReturnArgs>(args?: SelectSubset<T, IntakeLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IntakeLogPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a IntakeLog.
     * @param {IntakeLogDeleteArgs} args - Arguments to delete one IntakeLog.
     * @example
     * // Delete one IntakeLog
     * const IntakeLog = await prisma.intakeLog.delete({
     *   where: {
     *     // ... filter to delete one IntakeLog
     *   }
     * })
     * 
     */
    delete<T extends IntakeLogDeleteArgs>(args: SelectSubset<T, IntakeLogDeleteArgs<ExtArgs>>): Prisma__IntakeLogClient<$Result.GetResult<Prisma.$IntakeLogPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one IntakeLog.
     * @param {IntakeLogUpdateArgs} args - Arguments to update one IntakeLog.
     * @example
     * // Update one IntakeLog
     * const intakeLog = await prisma.intakeLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends IntakeLogUpdateArgs>(args: SelectSubset<T, IntakeLogUpdateArgs<ExtArgs>>): Prisma__IntakeLogClient<$Result.GetResult<Prisma.$IntakeLogPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more IntakeLogs.
     * @param {IntakeLogDeleteManyArgs} args - Arguments to filter IntakeLogs to delete.
     * @example
     * // Delete a few IntakeLogs
     * const { count } = await prisma.intakeLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends IntakeLogDeleteManyArgs>(args?: SelectSubset<T, IntakeLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more IntakeLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntakeLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many IntakeLogs
     * const intakeLog = await prisma.intakeLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends IntakeLogUpdateManyArgs>(args: SelectSubset<T, IntakeLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more IntakeLogs and returns the data updated in the database.
     * @param {IntakeLogUpdateManyAndReturnArgs} args - Arguments to update many IntakeLogs.
     * @example
     * // Update many IntakeLogs
     * const intakeLog = await prisma.intakeLog.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more IntakeLogs and only return the `id`
     * const intakeLogWithIdOnly = await prisma.intakeLog.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends IntakeLogUpdateManyAndReturnArgs>(args: SelectSubset<T, IntakeLogUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$IntakeLogPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one IntakeLog.
     * @param {IntakeLogUpsertArgs} args - Arguments to update or create a IntakeLog.
     * @example
     * // Update or create a IntakeLog
     * const intakeLog = await prisma.intakeLog.upsert({
     *   create: {
     *     // ... data to create a IntakeLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the IntakeLog we want to update
     *   }
     * })
     */
    upsert<T extends IntakeLogUpsertArgs>(args: SelectSubset<T, IntakeLogUpsertArgs<ExtArgs>>): Prisma__IntakeLogClient<$Result.GetResult<Prisma.$IntakeLogPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of IntakeLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntakeLogCountArgs} args - Arguments to filter IntakeLogs to count.
     * @example
     * // Count the number of IntakeLogs
     * const count = await prisma.intakeLog.count({
     *   where: {
     *     // ... the filter for the IntakeLogs we want to count
     *   }
     * })
    **/
    count<T extends IntakeLogCountArgs>(
      args?: Subset<T, IntakeLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], IntakeLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a IntakeLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntakeLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends IntakeLogAggregateArgs>(args: Subset<T, IntakeLogAggregateArgs>): Prisma.PrismaPromise<GetIntakeLogAggregateType<T>>

    /**
     * Group by IntakeLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {IntakeLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends IntakeLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: IntakeLogGroupByArgs['orderBy'] }
        : { orderBy?: IntakeLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, IntakeLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetIntakeLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the IntakeLog model
   */
  readonly fields: IntakeLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for IntakeLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__IntakeLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    medication<T extends MedicationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MedicationDefaultArgs<ExtArgs>>): Prisma__MedicationClient<$Result.GetResult<Prisma.$MedicationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    schedule<T extends IntakeLog$scheduleArgs<ExtArgs> = {}>(args?: Subset<T, IntakeLog$scheduleArgs<ExtArgs>>): Prisma__ScheduleClient<$Result.GetResult<Prisma.$SchedulePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the IntakeLog model
   */
  interface IntakeLogFieldRefs {
    readonly id: FieldRef<"IntakeLog", 'String'>
    readonly medicationId: FieldRef<"IntakeLog", 'String'>
    readonly scheduleId: FieldRef<"IntakeLog", 'String'>
    readonly scheduledFor: FieldRef<"IntakeLog", 'DateTime'>
    readonly action: FieldRef<"IntakeLog", 'String'>
    readonly actionAt: FieldRef<"IntakeLog", 'DateTime'>
    readonly note: FieldRef<"IntakeLog", 'String'>
    readonly createdAt: FieldRef<"IntakeLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * IntakeLog findUnique
   */
  export type IntakeLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntakeLog
     */
    select?: IntakeLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntakeLog
     */
    omit?: IntakeLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntakeLogInclude<ExtArgs> | null
    /**
     * Filter, which IntakeLog to fetch.
     */
    where: IntakeLogWhereUniqueInput
  }

  /**
   * IntakeLog findUniqueOrThrow
   */
  export type IntakeLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntakeLog
     */
    select?: IntakeLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntakeLog
     */
    omit?: IntakeLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntakeLogInclude<ExtArgs> | null
    /**
     * Filter, which IntakeLog to fetch.
     */
    where: IntakeLogWhereUniqueInput
  }

  /**
   * IntakeLog findFirst
   */
  export type IntakeLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntakeLog
     */
    select?: IntakeLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntakeLog
     */
    omit?: IntakeLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntakeLogInclude<ExtArgs> | null
    /**
     * Filter, which IntakeLog to fetch.
     */
    where?: IntakeLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IntakeLogs to fetch.
     */
    orderBy?: IntakeLogOrderByWithRelationInput | IntakeLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IntakeLogs.
     */
    cursor?: IntakeLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IntakeLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IntakeLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IntakeLogs.
     */
    distinct?: IntakeLogScalarFieldEnum | IntakeLogScalarFieldEnum[]
  }

  /**
   * IntakeLog findFirstOrThrow
   */
  export type IntakeLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntakeLog
     */
    select?: IntakeLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntakeLog
     */
    omit?: IntakeLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntakeLogInclude<ExtArgs> | null
    /**
     * Filter, which IntakeLog to fetch.
     */
    where?: IntakeLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IntakeLogs to fetch.
     */
    orderBy?: IntakeLogOrderByWithRelationInput | IntakeLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for IntakeLogs.
     */
    cursor?: IntakeLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IntakeLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IntakeLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of IntakeLogs.
     */
    distinct?: IntakeLogScalarFieldEnum | IntakeLogScalarFieldEnum[]
  }

  /**
   * IntakeLog findMany
   */
  export type IntakeLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntakeLog
     */
    select?: IntakeLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntakeLog
     */
    omit?: IntakeLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntakeLogInclude<ExtArgs> | null
    /**
     * Filter, which IntakeLogs to fetch.
     */
    where?: IntakeLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of IntakeLogs to fetch.
     */
    orderBy?: IntakeLogOrderByWithRelationInput | IntakeLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing IntakeLogs.
     */
    cursor?: IntakeLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` IntakeLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` IntakeLogs.
     */
    skip?: number
    distinct?: IntakeLogScalarFieldEnum | IntakeLogScalarFieldEnum[]
  }

  /**
   * IntakeLog create
   */
  export type IntakeLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntakeLog
     */
    select?: IntakeLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntakeLog
     */
    omit?: IntakeLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntakeLogInclude<ExtArgs> | null
    /**
     * The data needed to create a IntakeLog.
     */
    data: XOR<IntakeLogCreateInput, IntakeLogUncheckedCreateInput>
  }

  /**
   * IntakeLog createMany
   */
  export type IntakeLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many IntakeLogs.
     */
    data: IntakeLogCreateManyInput | IntakeLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * IntakeLog createManyAndReturn
   */
  export type IntakeLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntakeLog
     */
    select?: IntakeLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the IntakeLog
     */
    omit?: IntakeLogOmit<ExtArgs> | null
    /**
     * The data used to create many IntakeLogs.
     */
    data: IntakeLogCreateManyInput | IntakeLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntakeLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * IntakeLog update
   */
  export type IntakeLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntakeLog
     */
    select?: IntakeLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntakeLog
     */
    omit?: IntakeLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntakeLogInclude<ExtArgs> | null
    /**
     * The data needed to update a IntakeLog.
     */
    data: XOR<IntakeLogUpdateInput, IntakeLogUncheckedUpdateInput>
    /**
     * Choose, which IntakeLog to update.
     */
    where: IntakeLogWhereUniqueInput
  }

  /**
   * IntakeLog updateMany
   */
  export type IntakeLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update IntakeLogs.
     */
    data: XOR<IntakeLogUpdateManyMutationInput, IntakeLogUncheckedUpdateManyInput>
    /**
     * Filter which IntakeLogs to update
     */
    where?: IntakeLogWhereInput
    /**
     * Limit how many IntakeLogs to update.
     */
    limit?: number
  }

  /**
   * IntakeLog updateManyAndReturn
   */
  export type IntakeLogUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntakeLog
     */
    select?: IntakeLogSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the IntakeLog
     */
    omit?: IntakeLogOmit<ExtArgs> | null
    /**
     * The data used to update IntakeLogs.
     */
    data: XOR<IntakeLogUpdateManyMutationInput, IntakeLogUncheckedUpdateManyInput>
    /**
     * Filter which IntakeLogs to update
     */
    where?: IntakeLogWhereInput
    /**
     * Limit how many IntakeLogs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntakeLogIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * IntakeLog upsert
   */
  export type IntakeLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntakeLog
     */
    select?: IntakeLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntakeLog
     */
    omit?: IntakeLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntakeLogInclude<ExtArgs> | null
    /**
     * The filter to search for the IntakeLog to update in case it exists.
     */
    where: IntakeLogWhereUniqueInput
    /**
     * In case the IntakeLog found by the `where` argument doesn't exist, create a new IntakeLog with this data.
     */
    create: XOR<IntakeLogCreateInput, IntakeLogUncheckedCreateInput>
    /**
     * In case the IntakeLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<IntakeLogUpdateInput, IntakeLogUncheckedUpdateInput>
  }

  /**
   * IntakeLog delete
   */
  export type IntakeLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntakeLog
     */
    select?: IntakeLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntakeLog
     */
    omit?: IntakeLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntakeLogInclude<ExtArgs> | null
    /**
     * Filter which IntakeLog to delete.
     */
    where: IntakeLogWhereUniqueInput
  }

  /**
   * IntakeLog deleteMany
   */
  export type IntakeLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which IntakeLogs to delete
     */
    where?: IntakeLogWhereInput
    /**
     * Limit how many IntakeLogs to delete.
     */
    limit?: number
  }

  /**
   * IntakeLog.schedule
   */
  export type IntakeLog$scheduleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Schedule
     */
    select?: ScheduleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Schedule
     */
    omit?: ScheduleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScheduleInclude<ExtArgs> | null
    where?: ScheduleWhereInput
  }

  /**
   * IntakeLog without action
   */
  export type IntakeLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the IntakeLog
     */
    select?: IntakeLogSelect<ExtArgs> | null
    /**
     * Omit specific fields from the IntakeLog
     */
    omit?: IntakeLogOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: IntakeLogInclude<ExtArgs> | null
  }


  /**
   * Model PatientCaregiver
   */

  export type AggregatePatientCaregiver = {
    _count: PatientCaregiverCountAggregateOutputType | null
    _min: PatientCaregiverMinAggregateOutputType | null
    _max: PatientCaregiverMaxAggregateOutputType | null
  }

  export type PatientCaregiverMinAggregateOutputType = {
    id: string | null
    patientId: string | null
    caregiverId: string | null
    relation: string | null
    createdAt: Date | null
  }

  export type PatientCaregiverMaxAggregateOutputType = {
    id: string | null
    patientId: string | null
    caregiverId: string | null
    relation: string | null
    createdAt: Date | null
  }

  export type PatientCaregiverCountAggregateOutputType = {
    id: number
    patientId: number
    caregiverId: number
    relation: number
    createdAt: number
    _all: number
  }


  export type PatientCaregiverMinAggregateInputType = {
    id?: true
    patientId?: true
    caregiverId?: true
    relation?: true
    createdAt?: true
  }

  export type PatientCaregiverMaxAggregateInputType = {
    id?: true
    patientId?: true
    caregiverId?: true
    relation?: true
    createdAt?: true
  }

  export type PatientCaregiverCountAggregateInputType = {
    id?: true
    patientId?: true
    caregiverId?: true
    relation?: true
    createdAt?: true
    _all?: true
  }

  export type PatientCaregiverAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientCaregiver to aggregate.
     */
    where?: PatientCaregiverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientCaregivers to fetch.
     */
    orderBy?: PatientCaregiverOrderByWithRelationInput | PatientCaregiverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PatientCaregiverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientCaregivers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientCaregivers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PatientCaregivers
    **/
    _count?: true | PatientCaregiverCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PatientCaregiverMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PatientCaregiverMaxAggregateInputType
  }

  export type GetPatientCaregiverAggregateType<T extends PatientCaregiverAggregateArgs> = {
        [P in keyof T & keyof AggregatePatientCaregiver]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePatientCaregiver[P]>
      : GetScalarType<T[P], AggregatePatientCaregiver[P]>
  }




  export type PatientCaregiverGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PatientCaregiverWhereInput
    orderBy?: PatientCaregiverOrderByWithAggregationInput | PatientCaregiverOrderByWithAggregationInput[]
    by: PatientCaregiverScalarFieldEnum[] | PatientCaregiverScalarFieldEnum
    having?: PatientCaregiverScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PatientCaregiverCountAggregateInputType | true
    _min?: PatientCaregiverMinAggregateInputType
    _max?: PatientCaregiverMaxAggregateInputType
  }

  export type PatientCaregiverGroupByOutputType = {
    id: string
    patientId: string
    caregiverId: string
    relation: string | null
    createdAt: Date
    _count: PatientCaregiverCountAggregateOutputType | null
    _min: PatientCaregiverMinAggregateOutputType | null
    _max: PatientCaregiverMaxAggregateOutputType | null
  }

  type GetPatientCaregiverGroupByPayload<T extends PatientCaregiverGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PatientCaregiverGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PatientCaregiverGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PatientCaregiverGroupByOutputType[P]>
            : GetScalarType<T[P], PatientCaregiverGroupByOutputType[P]>
        }
      >
    >


  export type PatientCaregiverSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    caregiverId?: boolean
    relation?: boolean
    createdAt?: boolean
    patient?: boolean | UserDefaultArgs<ExtArgs>
    caregiver?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patientCaregiver"]>

  export type PatientCaregiverSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    caregiverId?: boolean
    relation?: boolean
    createdAt?: boolean
    patient?: boolean | UserDefaultArgs<ExtArgs>
    caregiver?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patientCaregiver"]>

  export type PatientCaregiverSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    patientId?: boolean
    caregiverId?: boolean
    relation?: boolean
    createdAt?: boolean
    patient?: boolean | UserDefaultArgs<ExtArgs>
    caregiver?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["patientCaregiver"]>

  export type PatientCaregiverSelectScalar = {
    id?: boolean
    patientId?: boolean
    caregiverId?: boolean
    relation?: boolean
    createdAt?: boolean
  }

  export type PatientCaregiverOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "patientId" | "caregiverId" | "relation" | "createdAt", ExtArgs["result"]["patientCaregiver"]>
  export type PatientCaregiverInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | UserDefaultArgs<ExtArgs>
    caregiver?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PatientCaregiverIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | UserDefaultArgs<ExtArgs>
    caregiver?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PatientCaregiverIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    patient?: boolean | UserDefaultArgs<ExtArgs>
    caregiver?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PatientCaregiverPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PatientCaregiver"
    objects: {
      patient: Prisma.$UserPayload<ExtArgs>
      caregiver: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      patientId: string
      caregiverId: string
      relation: string | null
      createdAt: Date
    }, ExtArgs["result"]["patientCaregiver"]>
    composites: {}
  }

  type PatientCaregiverGetPayload<S extends boolean | null | undefined | PatientCaregiverDefaultArgs> = $Result.GetResult<Prisma.$PatientCaregiverPayload, S>

  type PatientCaregiverCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PatientCaregiverFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PatientCaregiverCountAggregateInputType | true
    }

  export interface PatientCaregiverDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PatientCaregiver'], meta: { name: 'PatientCaregiver' } }
    /**
     * Find zero or one PatientCaregiver that matches the filter.
     * @param {PatientCaregiverFindUniqueArgs} args - Arguments to find a PatientCaregiver
     * @example
     * // Get one PatientCaregiver
     * const patientCaregiver = await prisma.patientCaregiver.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PatientCaregiverFindUniqueArgs>(args: SelectSubset<T, PatientCaregiverFindUniqueArgs<ExtArgs>>): Prisma__PatientCaregiverClient<$Result.GetResult<Prisma.$PatientCaregiverPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PatientCaregiver that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PatientCaregiverFindUniqueOrThrowArgs} args - Arguments to find a PatientCaregiver
     * @example
     * // Get one PatientCaregiver
     * const patientCaregiver = await prisma.patientCaregiver.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PatientCaregiverFindUniqueOrThrowArgs>(args: SelectSubset<T, PatientCaregiverFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PatientCaregiverClient<$Result.GetResult<Prisma.$PatientCaregiverPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PatientCaregiver that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCaregiverFindFirstArgs} args - Arguments to find a PatientCaregiver
     * @example
     * // Get one PatientCaregiver
     * const patientCaregiver = await prisma.patientCaregiver.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PatientCaregiverFindFirstArgs>(args?: SelectSubset<T, PatientCaregiverFindFirstArgs<ExtArgs>>): Prisma__PatientCaregiverClient<$Result.GetResult<Prisma.$PatientCaregiverPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PatientCaregiver that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCaregiverFindFirstOrThrowArgs} args - Arguments to find a PatientCaregiver
     * @example
     * // Get one PatientCaregiver
     * const patientCaregiver = await prisma.patientCaregiver.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PatientCaregiverFindFirstOrThrowArgs>(args?: SelectSubset<T, PatientCaregiverFindFirstOrThrowArgs<ExtArgs>>): Prisma__PatientCaregiverClient<$Result.GetResult<Prisma.$PatientCaregiverPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PatientCaregivers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCaregiverFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PatientCaregivers
     * const patientCaregivers = await prisma.patientCaregiver.findMany()
     * 
     * // Get first 10 PatientCaregivers
     * const patientCaregivers = await prisma.patientCaregiver.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const patientCaregiverWithIdOnly = await prisma.patientCaregiver.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PatientCaregiverFindManyArgs>(args?: SelectSubset<T, PatientCaregiverFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientCaregiverPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PatientCaregiver.
     * @param {PatientCaregiverCreateArgs} args - Arguments to create a PatientCaregiver.
     * @example
     * // Create one PatientCaregiver
     * const PatientCaregiver = await prisma.patientCaregiver.create({
     *   data: {
     *     // ... data to create a PatientCaregiver
     *   }
     * })
     * 
     */
    create<T extends PatientCaregiverCreateArgs>(args: SelectSubset<T, PatientCaregiverCreateArgs<ExtArgs>>): Prisma__PatientCaregiverClient<$Result.GetResult<Prisma.$PatientCaregiverPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PatientCaregivers.
     * @param {PatientCaregiverCreateManyArgs} args - Arguments to create many PatientCaregivers.
     * @example
     * // Create many PatientCaregivers
     * const patientCaregiver = await prisma.patientCaregiver.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PatientCaregiverCreateManyArgs>(args?: SelectSubset<T, PatientCaregiverCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PatientCaregivers and returns the data saved in the database.
     * @param {PatientCaregiverCreateManyAndReturnArgs} args - Arguments to create many PatientCaregivers.
     * @example
     * // Create many PatientCaregivers
     * const patientCaregiver = await prisma.patientCaregiver.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PatientCaregivers and only return the `id`
     * const patientCaregiverWithIdOnly = await prisma.patientCaregiver.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PatientCaregiverCreateManyAndReturnArgs>(args?: SelectSubset<T, PatientCaregiverCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientCaregiverPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PatientCaregiver.
     * @param {PatientCaregiverDeleteArgs} args - Arguments to delete one PatientCaregiver.
     * @example
     * // Delete one PatientCaregiver
     * const PatientCaregiver = await prisma.patientCaregiver.delete({
     *   where: {
     *     // ... filter to delete one PatientCaregiver
     *   }
     * })
     * 
     */
    delete<T extends PatientCaregiverDeleteArgs>(args: SelectSubset<T, PatientCaregiverDeleteArgs<ExtArgs>>): Prisma__PatientCaregiverClient<$Result.GetResult<Prisma.$PatientCaregiverPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PatientCaregiver.
     * @param {PatientCaregiverUpdateArgs} args - Arguments to update one PatientCaregiver.
     * @example
     * // Update one PatientCaregiver
     * const patientCaregiver = await prisma.patientCaregiver.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PatientCaregiverUpdateArgs>(args: SelectSubset<T, PatientCaregiverUpdateArgs<ExtArgs>>): Prisma__PatientCaregiverClient<$Result.GetResult<Prisma.$PatientCaregiverPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PatientCaregivers.
     * @param {PatientCaregiverDeleteManyArgs} args - Arguments to filter PatientCaregivers to delete.
     * @example
     * // Delete a few PatientCaregivers
     * const { count } = await prisma.patientCaregiver.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PatientCaregiverDeleteManyArgs>(args?: SelectSubset<T, PatientCaregiverDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatientCaregivers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCaregiverUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PatientCaregivers
     * const patientCaregiver = await prisma.patientCaregiver.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PatientCaregiverUpdateManyArgs>(args: SelectSubset<T, PatientCaregiverUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PatientCaregivers and returns the data updated in the database.
     * @param {PatientCaregiverUpdateManyAndReturnArgs} args - Arguments to update many PatientCaregivers.
     * @example
     * // Update many PatientCaregivers
     * const patientCaregiver = await prisma.patientCaregiver.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PatientCaregivers and only return the `id`
     * const patientCaregiverWithIdOnly = await prisma.patientCaregiver.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PatientCaregiverUpdateManyAndReturnArgs>(args: SelectSubset<T, PatientCaregiverUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PatientCaregiverPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PatientCaregiver.
     * @param {PatientCaregiverUpsertArgs} args - Arguments to update or create a PatientCaregiver.
     * @example
     * // Update or create a PatientCaregiver
     * const patientCaregiver = await prisma.patientCaregiver.upsert({
     *   create: {
     *     // ... data to create a PatientCaregiver
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PatientCaregiver we want to update
     *   }
     * })
     */
    upsert<T extends PatientCaregiverUpsertArgs>(args: SelectSubset<T, PatientCaregiverUpsertArgs<ExtArgs>>): Prisma__PatientCaregiverClient<$Result.GetResult<Prisma.$PatientCaregiverPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PatientCaregivers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCaregiverCountArgs} args - Arguments to filter PatientCaregivers to count.
     * @example
     * // Count the number of PatientCaregivers
     * const count = await prisma.patientCaregiver.count({
     *   where: {
     *     // ... the filter for the PatientCaregivers we want to count
     *   }
     * })
    **/
    count<T extends PatientCaregiverCountArgs>(
      args?: Subset<T, PatientCaregiverCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PatientCaregiverCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PatientCaregiver.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCaregiverAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PatientCaregiverAggregateArgs>(args: Subset<T, PatientCaregiverAggregateArgs>): Prisma.PrismaPromise<GetPatientCaregiverAggregateType<T>>

    /**
     * Group by PatientCaregiver.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PatientCaregiverGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PatientCaregiverGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PatientCaregiverGroupByArgs['orderBy'] }
        : { orderBy?: PatientCaregiverGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PatientCaregiverGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPatientCaregiverGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PatientCaregiver model
   */
  readonly fields: PatientCaregiverFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PatientCaregiver.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PatientCaregiverClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    patient<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    caregiver<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PatientCaregiver model
   */
  interface PatientCaregiverFieldRefs {
    readonly id: FieldRef<"PatientCaregiver", 'String'>
    readonly patientId: FieldRef<"PatientCaregiver", 'String'>
    readonly caregiverId: FieldRef<"PatientCaregiver", 'String'>
    readonly relation: FieldRef<"PatientCaregiver", 'String'>
    readonly createdAt: FieldRef<"PatientCaregiver", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PatientCaregiver findUnique
   */
  export type PatientCaregiverFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCaregiver
     */
    select?: PatientCaregiverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientCaregiver
     */
    omit?: PatientCaregiverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientCaregiverInclude<ExtArgs> | null
    /**
     * Filter, which PatientCaregiver to fetch.
     */
    where: PatientCaregiverWhereUniqueInput
  }

  /**
   * PatientCaregiver findUniqueOrThrow
   */
  export type PatientCaregiverFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCaregiver
     */
    select?: PatientCaregiverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientCaregiver
     */
    omit?: PatientCaregiverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientCaregiverInclude<ExtArgs> | null
    /**
     * Filter, which PatientCaregiver to fetch.
     */
    where: PatientCaregiverWhereUniqueInput
  }

  /**
   * PatientCaregiver findFirst
   */
  export type PatientCaregiverFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCaregiver
     */
    select?: PatientCaregiverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientCaregiver
     */
    omit?: PatientCaregiverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientCaregiverInclude<ExtArgs> | null
    /**
     * Filter, which PatientCaregiver to fetch.
     */
    where?: PatientCaregiverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientCaregivers to fetch.
     */
    orderBy?: PatientCaregiverOrderByWithRelationInput | PatientCaregiverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientCaregivers.
     */
    cursor?: PatientCaregiverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientCaregivers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientCaregivers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientCaregivers.
     */
    distinct?: PatientCaregiverScalarFieldEnum | PatientCaregiverScalarFieldEnum[]
  }

  /**
   * PatientCaregiver findFirstOrThrow
   */
  export type PatientCaregiverFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCaregiver
     */
    select?: PatientCaregiverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientCaregiver
     */
    omit?: PatientCaregiverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientCaregiverInclude<ExtArgs> | null
    /**
     * Filter, which PatientCaregiver to fetch.
     */
    where?: PatientCaregiverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientCaregivers to fetch.
     */
    orderBy?: PatientCaregiverOrderByWithRelationInput | PatientCaregiverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PatientCaregivers.
     */
    cursor?: PatientCaregiverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientCaregivers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientCaregivers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PatientCaregivers.
     */
    distinct?: PatientCaregiverScalarFieldEnum | PatientCaregiverScalarFieldEnum[]
  }

  /**
   * PatientCaregiver findMany
   */
  export type PatientCaregiverFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCaregiver
     */
    select?: PatientCaregiverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientCaregiver
     */
    omit?: PatientCaregiverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientCaregiverInclude<ExtArgs> | null
    /**
     * Filter, which PatientCaregivers to fetch.
     */
    where?: PatientCaregiverWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PatientCaregivers to fetch.
     */
    orderBy?: PatientCaregiverOrderByWithRelationInput | PatientCaregiverOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PatientCaregivers.
     */
    cursor?: PatientCaregiverWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PatientCaregivers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PatientCaregivers.
     */
    skip?: number
    distinct?: PatientCaregiverScalarFieldEnum | PatientCaregiverScalarFieldEnum[]
  }

  /**
   * PatientCaregiver create
   */
  export type PatientCaregiverCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCaregiver
     */
    select?: PatientCaregiverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientCaregiver
     */
    omit?: PatientCaregiverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientCaregiverInclude<ExtArgs> | null
    /**
     * The data needed to create a PatientCaregiver.
     */
    data: XOR<PatientCaregiverCreateInput, PatientCaregiverUncheckedCreateInput>
  }

  /**
   * PatientCaregiver createMany
   */
  export type PatientCaregiverCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PatientCaregivers.
     */
    data: PatientCaregiverCreateManyInput | PatientCaregiverCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PatientCaregiver createManyAndReturn
   */
  export type PatientCaregiverCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCaregiver
     */
    select?: PatientCaregiverSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PatientCaregiver
     */
    omit?: PatientCaregiverOmit<ExtArgs> | null
    /**
     * The data used to create many PatientCaregivers.
     */
    data: PatientCaregiverCreateManyInput | PatientCaregiverCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientCaregiverIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PatientCaregiver update
   */
  export type PatientCaregiverUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCaregiver
     */
    select?: PatientCaregiverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientCaregiver
     */
    omit?: PatientCaregiverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientCaregiverInclude<ExtArgs> | null
    /**
     * The data needed to update a PatientCaregiver.
     */
    data: XOR<PatientCaregiverUpdateInput, PatientCaregiverUncheckedUpdateInput>
    /**
     * Choose, which PatientCaregiver to update.
     */
    where: PatientCaregiverWhereUniqueInput
  }

  /**
   * PatientCaregiver updateMany
   */
  export type PatientCaregiverUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PatientCaregivers.
     */
    data: XOR<PatientCaregiverUpdateManyMutationInput, PatientCaregiverUncheckedUpdateManyInput>
    /**
     * Filter which PatientCaregivers to update
     */
    where?: PatientCaregiverWhereInput
    /**
     * Limit how many PatientCaregivers to update.
     */
    limit?: number
  }

  /**
   * PatientCaregiver updateManyAndReturn
   */
  export type PatientCaregiverUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCaregiver
     */
    select?: PatientCaregiverSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PatientCaregiver
     */
    omit?: PatientCaregiverOmit<ExtArgs> | null
    /**
     * The data used to update PatientCaregivers.
     */
    data: XOR<PatientCaregiverUpdateManyMutationInput, PatientCaregiverUncheckedUpdateManyInput>
    /**
     * Filter which PatientCaregivers to update
     */
    where?: PatientCaregiverWhereInput
    /**
     * Limit how many PatientCaregivers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientCaregiverIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PatientCaregiver upsert
   */
  export type PatientCaregiverUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCaregiver
     */
    select?: PatientCaregiverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientCaregiver
     */
    omit?: PatientCaregiverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientCaregiverInclude<ExtArgs> | null
    /**
     * The filter to search for the PatientCaregiver to update in case it exists.
     */
    where: PatientCaregiverWhereUniqueInput
    /**
     * In case the PatientCaregiver found by the `where` argument doesn't exist, create a new PatientCaregiver with this data.
     */
    create: XOR<PatientCaregiverCreateInput, PatientCaregiverUncheckedCreateInput>
    /**
     * In case the PatientCaregiver was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PatientCaregiverUpdateInput, PatientCaregiverUncheckedUpdateInput>
  }

  /**
   * PatientCaregiver delete
   */
  export type PatientCaregiverDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCaregiver
     */
    select?: PatientCaregiverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientCaregiver
     */
    omit?: PatientCaregiverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientCaregiverInclude<ExtArgs> | null
    /**
     * Filter which PatientCaregiver to delete.
     */
    where: PatientCaregiverWhereUniqueInput
  }

  /**
   * PatientCaregiver deleteMany
   */
  export type PatientCaregiverDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PatientCaregivers to delete
     */
    where?: PatientCaregiverWhereInput
    /**
     * Limit how many PatientCaregivers to delete.
     */
    limit?: number
  }

  /**
   * PatientCaregiver without action
   */
  export type PatientCaregiverDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PatientCaregiver
     */
    select?: PatientCaregiverSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PatientCaregiver
     */
    omit?: PatientCaregiverOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PatientCaregiverInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    email: 'email',
    phone: 'phone',
    role: 'role',
    password: 'password',
    birthDate: 'birthDate',
    address: 'address',
    emergencyContact: 'emergencyContact',
    emergencyPhone: 'emergencyPhone',
    medicalConditions: 'medicalConditions',
    allergies: 'allergies',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const MedicationScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    name: 'name',
    dosage: 'dosage',
    quantity: 'quantity',
    presentation: 'presentation',
    instructions: 'instructions',
    color: 'color',
    active: 'active',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    deletedAt: 'deletedAt'
  };

  export type MedicationScalarFieldEnum = (typeof MedicationScalarFieldEnum)[keyof typeof MedicationScalarFieldEnum]


  export const ScheduleScalarFieldEnum: {
    id: 'id',
    medicationId: 'medicationId',
    time: 'time',
    frequencyType: 'frequencyType',
    frequencyValue: 'frequencyValue',
    daysOfWeek: 'daysOfWeek',
    endDate: 'endDate',
    active: 'active',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ScheduleScalarFieldEnum = (typeof ScheduleScalarFieldEnum)[keyof typeof ScheduleScalarFieldEnum]


  export const IntakeLogScalarFieldEnum: {
    id: 'id',
    medicationId: 'medicationId',
    scheduleId: 'scheduleId',
    scheduledFor: 'scheduledFor',
    action: 'action',
    actionAt: 'actionAt',
    note: 'note',
    createdAt: 'createdAt'
  };

  export type IntakeLogScalarFieldEnum = (typeof IntakeLogScalarFieldEnum)[keyof typeof IntakeLogScalarFieldEnum]


  export const PatientCaregiverScalarFieldEnum: {
    id: 'id',
    patientId: 'patientId',
    caregiverId: 'caregiverId',
    relation: 'relation',
    createdAt: 'createdAt'
  };

  export type PatientCaregiverScalarFieldEnum = (typeof PatientCaregiverScalarFieldEnum)[keyof typeof PatientCaregiverScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    email?: StringNullableFilter<"User"> | string | null
    phone?: StringNullableFilter<"User"> | string | null
    role?: StringFilter<"User"> | string
    password?: StringNullableFilter<"User"> | string | null
    birthDate?: StringNullableFilter<"User"> | string | null
    address?: StringNullableFilter<"User"> | string | null
    emergencyContact?: StringNullableFilter<"User"> | string | null
    emergencyPhone?: StringNullableFilter<"User"> | string | null
    medicalConditions?: StringNullableFilter<"User"> | string | null
    allergies?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    medications?: MedicationListRelationFilter
    patientLinks?: PatientCaregiverListRelationFilter
    caregiverLinks?: PatientCaregiverListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    role?: SortOrder
    password?: SortOrderInput | SortOrder
    birthDate?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    emergencyContact?: SortOrderInput | SortOrder
    emergencyPhone?: SortOrderInput | SortOrder
    medicalConditions?: SortOrderInput | SortOrder
    allergies?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    medications?: MedicationOrderByRelationAggregateInput
    patientLinks?: PatientCaregiverOrderByRelationAggregateInput
    caregiverLinks?: PatientCaregiverOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    phone?: StringNullableFilter<"User"> | string | null
    role?: StringFilter<"User"> | string
    password?: StringNullableFilter<"User"> | string | null
    birthDate?: StringNullableFilter<"User"> | string | null
    address?: StringNullableFilter<"User"> | string | null
    emergencyContact?: StringNullableFilter<"User"> | string | null
    emergencyPhone?: StringNullableFilter<"User"> | string | null
    medicalConditions?: StringNullableFilter<"User"> | string | null
    allergies?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    medications?: MedicationListRelationFilter
    patientLinks?: PatientCaregiverListRelationFilter
    caregiverLinks?: PatientCaregiverListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrderInput | SortOrder
    phone?: SortOrderInput | SortOrder
    role?: SortOrder
    password?: SortOrderInput | SortOrder
    birthDate?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    emergencyContact?: SortOrderInput | SortOrder
    emergencyPhone?: SortOrderInput | SortOrder
    medicalConditions?: SortOrderInput | SortOrder
    allergies?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    phone?: StringNullableWithAggregatesFilter<"User"> | string | null
    role?: StringWithAggregatesFilter<"User"> | string
    password?: StringNullableWithAggregatesFilter<"User"> | string | null
    birthDate?: StringNullableWithAggregatesFilter<"User"> | string | null
    address?: StringNullableWithAggregatesFilter<"User"> | string | null
    emergencyContact?: StringNullableWithAggregatesFilter<"User"> | string | null
    emergencyPhone?: StringNullableWithAggregatesFilter<"User"> | string | null
    medicalConditions?: StringNullableWithAggregatesFilter<"User"> | string | null
    allergies?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type MedicationWhereInput = {
    AND?: MedicationWhereInput | MedicationWhereInput[]
    OR?: MedicationWhereInput[]
    NOT?: MedicationWhereInput | MedicationWhereInput[]
    id?: StringFilter<"Medication"> | string
    patientId?: StringFilter<"Medication"> | string
    name?: StringFilter<"Medication"> | string
    dosage?: StringNullableFilter<"Medication"> | string | null
    quantity?: IntNullableFilter<"Medication"> | number | null
    presentation?: StringNullableFilter<"Medication"> | string | null
    instructions?: StringNullableFilter<"Medication"> | string | null
    color?: StringNullableFilter<"Medication"> | string | null
    active?: BoolFilter<"Medication"> | boolean
    createdAt?: DateTimeFilter<"Medication"> | Date | string
    updatedAt?: DateTimeFilter<"Medication"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Medication"> | Date | string | null
    patient?: XOR<UserScalarRelationFilter, UserWhereInput>
    schedules?: ScheduleListRelationFilter
    intakes?: IntakeLogListRelationFilter
  }

  export type MedicationOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    name?: SortOrder
    dosage?: SortOrderInput | SortOrder
    quantity?: SortOrderInput | SortOrder
    presentation?: SortOrderInput | SortOrder
    instructions?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    patient?: UserOrderByWithRelationInput
    schedules?: ScheduleOrderByRelationAggregateInput
    intakes?: IntakeLogOrderByRelationAggregateInput
  }

  export type MedicationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: MedicationWhereInput | MedicationWhereInput[]
    OR?: MedicationWhereInput[]
    NOT?: MedicationWhereInput | MedicationWhereInput[]
    patientId?: StringFilter<"Medication"> | string
    name?: StringFilter<"Medication"> | string
    dosage?: StringNullableFilter<"Medication"> | string | null
    quantity?: IntNullableFilter<"Medication"> | number | null
    presentation?: StringNullableFilter<"Medication"> | string | null
    instructions?: StringNullableFilter<"Medication"> | string | null
    color?: StringNullableFilter<"Medication"> | string | null
    active?: BoolFilter<"Medication"> | boolean
    createdAt?: DateTimeFilter<"Medication"> | Date | string
    updatedAt?: DateTimeFilter<"Medication"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Medication"> | Date | string | null
    patient?: XOR<UserScalarRelationFilter, UserWhereInput>
    schedules?: ScheduleListRelationFilter
    intakes?: IntakeLogListRelationFilter
  }, "id">

  export type MedicationOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    name?: SortOrder
    dosage?: SortOrderInput | SortOrder
    quantity?: SortOrderInput | SortOrder
    presentation?: SortOrderInput | SortOrder
    instructions?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrderInput | SortOrder
    _count?: MedicationCountOrderByAggregateInput
    _avg?: MedicationAvgOrderByAggregateInput
    _max?: MedicationMaxOrderByAggregateInput
    _min?: MedicationMinOrderByAggregateInput
    _sum?: MedicationSumOrderByAggregateInput
  }

  export type MedicationScalarWhereWithAggregatesInput = {
    AND?: MedicationScalarWhereWithAggregatesInput | MedicationScalarWhereWithAggregatesInput[]
    OR?: MedicationScalarWhereWithAggregatesInput[]
    NOT?: MedicationScalarWhereWithAggregatesInput | MedicationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Medication"> | string
    patientId?: StringWithAggregatesFilter<"Medication"> | string
    name?: StringWithAggregatesFilter<"Medication"> | string
    dosage?: StringNullableWithAggregatesFilter<"Medication"> | string | null
    quantity?: IntNullableWithAggregatesFilter<"Medication"> | number | null
    presentation?: StringNullableWithAggregatesFilter<"Medication"> | string | null
    instructions?: StringNullableWithAggregatesFilter<"Medication"> | string | null
    color?: StringNullableWithAggregatesFilter<"Medication"> | string | null
    active?: BoolWithAggregatesFilter<"Medication"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Medication"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Medication"> | Date | string
    deletedAt?: DateTimeNullableWithAggregatesFilter<"Medication"> | Date | string | null
  }

  export type ScheduleWhereInput = {
    AND?: ScheduleWhereInput | ScheduleWhereInput[]
    OR?: ScheduleWhereInput[]
    NOT?: ScheduleWhereInput | ScheduleWhereInput[]
    id?: StringFilter<"Schedule"> | string
    medicationId?: StringFilter<"Schedule"> | string
    time?: StringFilter<"Schedule"> | string
    frequencyType?: StringFilter<"Schedule"> | string
    frequencyValue?: IntNullableFilter<"Schedule"> | number | null
    daysOfWeek?: StringNullableFilter<"Schedule"> | string | null
    endDate?: StringNullableFilter<"Schedule"> | string | null
    active?: BoolFilter<"Schedule"> | boolean
    createdAt?: DateTimeFilter<"Schedule"> | Date | string
    updatedAt?: DateTimeFilter<"Schedule"> | Date | string
    medication?: XOR<MedicationScalarRelationFilter, MedicationWhereInput>
    intakes?: IntakeLogListRelationFilter
  }

  export type ScheduleOrderByWithRelationInput = {
    id?: SortOrder
    medicationId?: SortOrder
    time?: SortOrder
    frequencyType?: SortOrder
    frequencyValue?: SortOrderInput | SortOrder
    daysOfWeek?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    medication?: MedicationOrderByWithRelationInput
    intakes?: IntakeLogOrderByRelationAggregateInput
  }

  export type ScheduleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ScheduleWhereInput | ScheduleWhereInput[]
    OR?: ScheduleWhereInput[]
    NOT?: ScheduleWhereInput | ScheduleWhereInput[]
    medicationId?: StringFilter<"Schedule"> | string
    time?: StringFilter<"Schedule"> | string
    frequencyType?: StringFilter<"Schedule"> | string
    frequencyValue?: IntNullableFilter<"Schedule"> | number | null
    daysOfWeek?: StringNullableFilter<"Schedule"> | string | null
    endDate?: StringNullableFilter<"Schedule"> | string | null
    active?: BoolFilter<"Schedule"> | boolean
    createdAt?: DateTimeFilter<"Schedule"> | Date | string
    updatedAt?: DateTimeFilter<"Schedule"> | Date | string
    medication?: XOR<MedicationScalarRelationFilter, MedicationWhereInput>
    intakes?: IntakeLogListRelationFilter
  }, "id">

  export type ScheduleOrderByWithAggregationInput = {
    id?: SortOrder
    medicationId?: SortOrder
    time?: SortOrder
    frequencyType?: SortOrder
    frequencyValue?: SortOrderInput | SortOrder
    daysOfWeek?: SortOrderInput | SortOrder
    endDate?: SortOrderInput | SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ScheduleCountOrderByAggregateInput
    _avg?: ScheduleAvgOrderByAggregateInput
    _max?: ScheduleMaxOrderByAggregateInput
    _min?: ScheduleMinOrderByAggregateInput
    _sum?: ScheduleSumOrderByAggregateInput
  }

  export type ScheduleScalarWhereWithAggregatesInput = {
    AND?: ScheduleScalarWhereWithAggregatesInput | ScheduleScalarWhereWithAggregatesInput[]
    OR?: ScheduleScalarWhereWithAggregatesInput[]
    NOT?: ScheduleScalarWhereWithAggregatesInput | ScheduleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Schedule"> | string
    medicationId?: StringWithAggregatesFilter<"Schedule"> | string
    time?: StringWithAggregatesFilter<"Schedule"> | string
    frequencyType?: StringWithAggregatesFilter<"Schedule"> | string
    frequencyValue?: IntNullableWithAggregatesFilter<"Schedule"> | number | null
    daysOfWeek?: StringNullableWithAggregatesFilter<"Schedule"> | string | null
    endDate?: StringNullableWithAggregatesFilter<"Schedule"> | string | null
    active?: BoolWithAggregatesFilter<"Schedule"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Schedule"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Schedule"> | Date | string
  }

  export type IntakeLogWhereInput = {
    AND?: IntakeLogWhereInput | IntakeLogWhereInput[]
    OR?: IntakeLogWhereInput[]
    NOT?: IntakeLogWhereInput | IntakeLogWhereInput[]
    id?: StringFilter<"IntakeLog"> | string
    medicationId?: StringFilter<"IntakeLog"> | string
    scheduleId?: StringNullableFilter<"IntakeLog"> | string | null
    scheduledFor?: DateTimeFilter<"IntakeLog"> | Date | string
    action?: StringFilter<"IntakeLog"> | string
    actionAt?: DateTimeFilter<"IntakeLog"> | Date | string
    note?: StringNullableFilter<"IntakeLog"> | string | null
    createdAt?: DateTimeFilter<"IntakeLog"> | Date | string
    medication?: XOR<MedicationScalarRelationFilter, MedicationWhereInput>
    schedule?: XOR<ScheduleNullableScalarRelationFilter, ScheduleWhereInput> | null
  }

  export type IntakeLogOrderByWithRelationInput = {
    id?: SortOrder
    medicationId?: SortOrder
    scheduleId?: SortOrderInput | SortOrder
    scheduledFor?: SortOrder
    action?: SortOrder
    actionAt?: SortOrder
    note?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    medication?: MedicationOrderByWithRelationInput
    schedule?: ScheduleOrderByWithRelationInput
  }

  export type IntakeLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: IntakeLogWhereInput | IntakeLogWhereInput[]
    OR?: IntakeLogWhereInput[]
    NOT?: IntakeLogWhereInput | IntakeLogWhereInput[]
    medicationId?: StringFilter<"IntakeLog"> | string
    scheduleId?: StringNullableFilter<"IntakeLog"> | string | null
    scheduledFor?: DateTimeFilter<"IntakeLog"> | Date | string
    action?: StringFilter<"IntakeLog"> | string
    actionAt?: DateTimeFilter<"IntakeLog"> | Date | string
    note?: StringNullableFilter<"IntakeLog"> | string | null
    createdAt?: DateTimeFilter<"IntakeLog"> | Date | string
    medication?: XOR<MedicationScalarRelationFilter, MedicationWhereInput>
    schedule?: XOR<ScheduleNullableScalarRelationFilter, ScheduleWhereInput> | null
  }, "id">

  export type IntakeLogOrderByWithAggregationInput = {
    id?: SortOrder
    medicationId?: SortOrder
    scheduleId?: SortOrderInput | SortOrder
    scheduledFor?: SortOrder
    action?: SortOrder
    actionAt?: SortOrder
    note?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: IntakeLogCountOrderByAggregateInput
    _max?: IntakeLogMaxOrderByAggregateInput
    _min?: IntakeLogMinOrderByAggregateInput
  }

  export type IntakeLogScalarWhereWithAggregatesInput = {
    AND?: IntakeLogScalarWhereWithAggregatesInput | IntakeLogScalarWhereWithAggregatesInput[]
    OR?: IntakeLogScalarWhereWithAggregatesInput[]
    NOT?: IntakeLogScalarWhereWithAggregatesInput | IntakeLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"IntakeLog"> | string
    medicationId?: StringWithAggregatesFilter<"IntakeLog"> | string
    scheduleId?: StringNullableWithAggregatesFilter<"IntakeLog"> | string | null
    scheduledFor?: DateTimeWithAggregatesFilter<"IntakeLog"> | Date | string
    action?: StringWithAggregatesFilter<"IntakeLog"> | string
    actionAt?: DateTimeWithAggregatesFilter<"IntakeLog"> | Date | string
    note?: StringNullableWithAggregatesFilter<"IntakeLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"IntakeLog"> | Date | string
  }

  export type PatientCaregiverWhereInput = {
    AND?: PatientCaregiverWhereInput | PatientCaregiverWhereInput[]
    OR?: PatientCaregiverWhereInput[]
    NOT?: PatientCaregiverWhereInput | PatientCaregiverWhereInput[]
    id?: StringFilter<"PatientCaregiver"> | string
    patientId?: StringFilter<"PatientCaregiver"> | string
    caregiverId?: StringFilter<"PatientCaregiver"> | string
    relation?: StringNullableFilter<"PatientCaregiver"> | string | null
    createdAt?: DateTimeFilter<"PatientCaregiver"> | Date | string
    patient?: XOR<UserScalarRelationFilter, UserWhereInput>
    caregiver?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type PatientCaregiverOrderByWithRelationInput = {
    id?: SortOrder
    patientId?: SortOrder
    caregiverId?: SortOrder
    relation?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    patient?: UserOrderByWithRelationInput
    caregiver?: UserOrderByWithRelationInput
  }

  export type PatientCaregiverWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    patientId_caregiverId?: PatientCaregiverPatientIdCaregiverIdCompoundUniqueInput
    AND?: PatientCaregiverWhereInput | PatientCaregiverWhereInput[]
    OR?: PatientCaregiverWhereInput[]
    NOT?: PatientCaregiverWhereInput | PatientCaregiverWhereInput[]
    patientId?: StringFilter<"PatientCaregiver"> | string
    caregiverId?: StringFilter<"PatientCaregiver"> | string
    relation?: StringNullableFilter<"PatientCaregiver"> | string | null
    createdAt?: DateTimeFilter<"PatientCaregiver"> | Date | string
    patient?: XOR<UserScalarRelationFilter, UserWhereInput>
    caregiver?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "patientId_caregiverId">

  export type PatientCaregiverOrderByWithAggregationInput = {
    id?: SortOrder
    patientId?: SortOrder
    caregiverId?: SortOrder
    relation?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: PatientCaregiverCountOrderByAggregateInput
    _max?: PatientCaregiverMaxOrderByAggregateInput
    _min?: PatientCaregiverMinOrderByAggregateInput
  }

  export type PatientCaregiverScalarWhereWithAggregatesInput = {
    AND?: PatientCaregiverScalarWhereWithAggregatesInput | PatientCaregiverScalarWhereWithAggregatesInput[]
    OR?: PatientCaregiverScalarWhereWithAggregatesInput[]
    NOT?: PatientCaregiverScalarWhereWithAggregatesInput | PatientCaregiverScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PatientCaregiver"> | string
    patientId?: StringWithAggregatesFilter<"PatientCaregiver"> | string
    caregiverId?: StringWithAggregatesFilter<"PatientCaregiver"> | string
    relation?: StringNullableWithAggregatesFilter<"PatientCaregiver"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"PatientCaregiver"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    firstName: string
    lastName: string
    email?: string | null
    phone?: string | null
    role?: string
    password?: string | null
    birthDate?: string | null
    address?: string | null
    emergencyContact?: string | null
    emergencyPhone?: string | null
    medicalConditions?: string | null
    allergies?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    medications?: MedicationCreateNestedManyWithoutPatientInput
    patientLinks?: PatientCaregiverCreateNestedManyWithoutPatientInput
    caregiverLinks?: PatientCaregiverCreateNestedManyWithoutCaregiverInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    firstName: string
    lastName: string
    email?: string | null
    phone?: string | null
    role?: string
    password?: string | null
    birthDate?: string | null
    address?: string | null
    emergencyContact?: string | null
    emergencyPhone?: string | null
    medicalConditions?: string | null
    allergies?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    medications?: MedicationUncheckedCreateNestedManyWithoutPatientInput
    patientLinks?: PatientCaregiverUncheckedCreateNestedManyWithoutPatientInput
    caregiverLinks?: PatientCaregiverUncheckedCreateNestedManyWithoutCaregiverInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyPhone?: NullableStringFieldUpdateOperationsInput | string | null
    medicalConditions?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medications?: MedicationUpdateManyWithoutPatientNestedInput
    patientLinks?: PatientCaregiverUpdateManyWithoutPatientNestedInput
    caregiverLinks?: PatientCaregiverUpdateManyWithoutCaregiverNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyPhone?: NullableStringFieldUpdateOperationsInput | string | null
    medicalConditions?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medications?: MedicationUncheckedUpdateManyWithoutPatientNestedInput
    patientLinks?: PatientCaregiverUncheckedUpdateManyWithoutPatientNestedInput
    caregiverLinks?: PatientCaregiverUncheckedUpdateManyWithoutCaregiverNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    firstName: string
    lastName: string
    email?: string | null
    phone?: string | null
    role?: string
    password?: string | null
    birthDate?: string | null
    address?: string | null
    emergencyContact?: string | null
    emergencyPhone?: string | null
    medicalConditions?: string | null
    allergies?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyPhone?: NullableStringFieldUpdateOperationsInput | string | null
    medicalConditions?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyPhone?: NullableStringFieldUpdateOperationsInput | string | null
    medicalConditions?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MedicationCreateInput = {
    id?: string
    name: string
    dosage?: string | null
    quantity?: number | null
    presentation?: string | null
    instructions?: string | null
    color?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    patient: UserCreateNestedOneWithoutMedicationsInput
    schedules?: ScheduleCreateNestedManyWithoutMedicationInput
    intakes?: IntakeLogCreateNestedManyWithoutMedicationInput
  }

  export type MedicationUncheckedCreateInput = {
    id?: string
    patientId: string
    name: string
    dosage?: string | null
    quantity?: number | null
    presentation?: string | null
    instructions?: string | null
    color?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutMedicationInput
    intakes?: IntakeLogUncheckedCreateNestedManyWithoutMedicationInput
  }

  export type MedicationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dosage?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    presentation?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: UserUpdateOneRequiredWithoutMedicationsNestedInput
    schedules?: ScheduleUpdateManyWithoutMedicationNestedInput
    intakes?: IntakeLogUpdateManyWithoutMedicationNestedInput
  }

  export type MedicationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dosage?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    presentation?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutMedicationNestedInput
    intakes?: IntakeLogUncheckedUpdateManyWithoutMedicationNestedInput
  }

  export type MedicationCreateManyInput = {
    id?: string
    patientId: string
    name: string
    dosage?: string | null
    quantity?: number | null
    presentation?: string | null
    instructions?: string | null
    color?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type MedicationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dosage?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    presentation?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type MedicationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dosage?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    presentation?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ScheduleCreateInput = {
    id?: string
    time: string
    frequencyType: string
    frequencyValue?: number | null
    daysOfWeek?: string | null
    endDate?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    medication: MedicationCreateNestedOneWithoutSchedulesInput
    intakes?: IntakeLogCreateNestedManyWithoutScheduleInput
  }

  export type ScheduleUncheckedCreateInput = {
    id?: string
    medicationId: string
    time: string
    frequencyType: string
    frequencyValue?: number | null
    daysOfWeek?: string | null
    endDate?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    intakes?: IntakeLogUncheckedCreateNestedManyWithoutScheduleInput
  }

  export type ScheduleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    frequencyType?: StringFieldUpdateOperationsInput | string
    frequencyValue?: NullableIntFieldUpdateOperationsInput | number | null
    daysOfWeek?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medication?: MedicationUpdateOneRequiredWithoutSchedulesNestedInput
    intakes?: IntakeLogUpdateManyWithoutScheduleNestedInput
  }

  export type ScheduleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicationId?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    frequencyType?: StringFieldUpdateOperationsInput | string
    frequencyValue?: NullableIntFieldUpdateOperationsInput | number | null
    daysOfWeek?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    intakes?: IntakeLogUncheckedUpdateManyWithoutScheduleNestedInput
  }

  export type ScheduleCreateManyInput = {
    id?: string
    medicationId: string
    time: string
    frequencyType: string
    frequencyValue?: number | null
    daysOfWeek?: string | null
    endDate?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    frequencyType?: StringFieldUpdateOperationsInput | string
    frequencyValue?: NullableIntFieldUpdateOperationsInput | number | null
    daysOfWeek?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicationId?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    frequencyType?: StringFieldUpdateOperationsInput | string
    frequencyValue?: NullableIntFieldUpdateOperationsInput | number | null
    daysOfWeek?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntakeLogCreateInput = {
    id?: string
    scheduledFor: Date | string
    action: string
    actionAt: Date | string
    note?: string | null
    createdAt?: Date | string
    medication: MedicationCreateNestedOneWithoutIntakesInput
    schedule?: ScheduleCreateNestedOneWithoutIntakesInput
  }

  export type IntakeLogUncheckedCreateInput = {
    id?: string
    medicationId: string
    scheduleId?: string | null
    scheduledFor: Date | string
    action: string
    actionAt: Date | string
    note?: string | null
    createdAt?: Date | string
  }

  export type IntakeLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledFor?: DateTimeFieldUpdateOperationsInput | Date | string
    action?: StringFieldUpdateOperationsInput | string
    actionAt?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medication?: MedicationUpdateOneRequiredWithoutIntakesNestedInput
    schedule?: ScheduleUpdateOneWithoutIntakesNestedInput
  }

  export type IntakeLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicationId?: StringFieldUpdateOperationsInput | string
    scheduleId?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledFor?: DateTimeFieldUpdateOperationsInput | Date | string
    action?: StringFieldUpdateOperationsInput | string
    actionAt?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntakeLogCreateManyInput = {
    id?: string
    medicationId: string
    scheduleId?: string | null
    scheduledFor: Date | string
    action: string
    actionAt: Date | string
    note?: string | null
    createdAt?: Date | string
  }

  export type IntakeLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledFor?: DateTimeFieldUpdateOperationsInput | Date | string
    action?: StringFieldUpdateOperationsInput | string
    actionAt?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntakeLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicationId?: StringFieldUpdateOperationsInput | string
    scheduleId?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledFor?: DateTimeFieldUpdateOperationsInput | Date | string
    action?: StringFieldUpdateOperationsInput | string
    actionAt?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientCaregiverCreateInput = {
    id?: string
    relation?: string | null
    createdAt?: Date | string
    patient: UserCreateNestedOneWithoutPatientLinksInput
    caregiver: UserCreateNestedOneWithoutCaregiverLinksInput
  }

  export type PatientCaregiverUncheckedCreateInput = {
    id?: string
    patientId: string
    caregiverId: string
    relation?: string | null
    createdAt?: Date | string
  }

  export type PatientCaregiverUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    relation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: UserUpdateOneRequiredWithoutPatientLinksNestedInput
    caregiver?: UserUpdateOneRequiredWithoutCaregiverLinksNestedInput
  }

  export type PatientCaregiverUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    caregiverId?: StringFieldUpdateOperationsInput | string
    relation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientCaregiverCreateManyInput = {
    id?: string
    patientId: string
    caregiverId: string
    relation?: string | null
    createdAt?: Date | string
  }

  export type PatientCaregiverUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    relation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientCaregiverUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    caregiverId?: StringFieldUpdateOperationsInput | string
    relation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type MedicationListRelationFilter = {
    every?: MedicationWhereInput
    some?: MedicationWhereInput
    none?: MedicationWhereInput
  }

  export type PatientCaregiverListRelationFilter = {
    every?: PatientCaregiverWhereInput
    some?: PatientCaregiverWhereInput
    none?: PatientCaregiverWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type MedicationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PatientCaregiverOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    role?: SortOrder
    password?: SortOrder
    birthDate?: SortOrder
    address?: SortOrder
    emergencyContact?: SortOrder
    emergencyPhone?: SortOrder
    medicalConditions?: SortOrder
    allergies?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    role?: SortOrder
    password?: SortOrder
    birthDate?: SortOrder
    address?: SortOrder
    emergencyContact?: SortOrder
    emergencyPhone?: SortOrder
    medicalConditions?: SortOrder
    allergies?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    role?: SortOrder
    password?: SortOrder
    birthDate?: SortOrder
    address?: SortOrder
    emergencyContact?: SortOrder
    emergencyPhone?: SortOrder
    medicalConditions?: SortOrder
    allergies?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ScheduleListRelationFilter = {
    every?: ScheduleWhereInput
    some?: ScheduleWhereInput
    none?: ScheduleWhereInput
  }

  export type IntakeLogListRelationFilter = {
    every?: IntakeLogWhereInput
    some?: IntakeLogWhereInput
    none?: IntakeLogWhereInput
  }

  export type ScheduleOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type IntakeLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MedicationCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    name?: SortOrder
    dosage?: SortOrder
    quantity?: SortOrder
    presentation?: SortOrder
    instructions?: SortOrder
    color?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type MedicationAvgOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type MedicationMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    name?: SortOrder
    dosage?: SortOrder
    quantity?: SortOrder
    presentation?: SortOrder
    instructions?: SortOrder
    color?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type MedicationMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    name?: SortOrder
    dosage?: SortOrder
    quantity?: SortOrder
    presentation?: SortOrder
    instructions?: SortOrder
    color?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    deletedAt?: SortOrder
  }

  export type MedicationSumOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type MedicationScalarRelationFilter = {
    is?: MedicationWhereInput
    isNot?: MedicationWhereInput
  }

  export type ScheduleCountOrderByAggregateInput = {
    id?: SortOrder
    medicationId?: SortOrder
    time?: SortOrder
    frequencyType?: SortOrder
    frequencyValue?: SortOrder
    daysOfWeek?: SortOrder
    endDate?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScheduleAvgOrderByAggregateInput = {
    frequencyValue?: SortOrder
  }

  export type ScheduleMaxOrderByAggregateInput = {
    id?: SortOrder
    medicationId?: SortOrder
    time?: SortOrder
    frequencyType?: SortOrder
    frequencyValue?: SortOrder
    daysOfWeek?: SortOrder
    endDate?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScheduleMinOrderByAggregateInput = {
    id?: SortOrder
    medicationId?: SortOrder
    time?: SortOrder
    frequencyType?: SortOrder
    frequencyValue?: SortOrder
    daysOfWeek?: SortOrder
    endDate?: SortOrder
    active?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ScheduleSumOrderByAggregateInput = {
    frequencyValue?: SortOrder
  }

  export type ScheduleNullableScalarRelationFilter = {
    is?: ScheduleWhereInput | null
    isNot?: ScheduleWhereInput | null
  }

  export type IntakeLogCountOrderByAggregateInput = {
    id?: SortOrder
    medicationId?: SortOrder
    scheduleId?: SortOrder
    scheduledFor?: SortOrder
    action?: SortOrder
    actionAt?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
  }

  export type IntakeLogMaxOrderByAggregateInput = {
    id?: SortOrder
    medicationId?: SortOrder
    scheduleId?: SortOrder
    scheduledFor?: SortOrder
    action?: SortOrder
    actionAt?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
  }

  export type IntakeLogMinOrderByAggregateInput = {
    id?: SortOrder
    medicationId?: SortOrder
    scheduleId?: SortOrder
    scheduledFor?: SortOrder
    action?: SortOrder
    actionAt?: SortOrder
    note?: SortOrder
    createdAt?: SortOrder
  }

  export type PatientCaregiverPatientIdCaregiverIdCompoundUniqueInput = {
    patientId: string
    caregiverId: string
  }

  export type PatientCaregiverCountOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    caregiverId?: SortOrder
    relation?: SortOrder
    createdAt?: SortOrder
  }

  export type PatientCaregiverMaxOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    caregiverId?: SortOrder
    relation?: SortOrder
    createdAt?: SortOrder
  }

  export type PatientCaregiverMinOrderByAggregateInput = {
    id?: SortOrder
    patientId?: SortOrder
    caregiverId?: SortOrder
    relation?: SortOrder
    createdAt?: SortOrder
  }

  export type MedicationCreateNestedManyWithoutPatientInput = {
    create?: XOR<MedicationCreateWithoutPatientInput, MedicationUncheckedCreateWithoutPatientInput> | MedicationCreateWithoutPatientInput[] | MedicationUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MedicationCreateOrConnectWithoutPatientInput | MedicationCreateOrConnectWithoutPatientInput[]
    createMany?: MedicationCreateManyPatientInputEnvelope
    connect?: MedicationWhereUniqueInput | MedicationWhereUniqueInput[]
  }

  export type PatientCaregiverCreateNestedManyWithoutPatientInput = {
    create?: XOR<PatientCaregiverCreateWithoutPatientInput, PatientCaregiverUncheckedCreateWithoutPatientInput> | PatientCaregiverCreateWithoutPatientInput[] | PatientCaregiverUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PatientCaregiverCreateOrConnectWithoutPatientInput | PatientCaregiverCreateOrConnectWithoutPatientInput[]
    createMany?: PatientCaregiverCreateManyPatientInputEnvelope
    connect?: PatientCaregiverWhereUniqueInput | PatientCaregiverWhereUniqueInput[]
  }

  export type PatientCaregiverCreateNestedManyWithoutCaregiverInput = {
    create?: XOR<PatientCaregiverCreateWithoutCaregiverInput, PatientCaregiverUncheckedCreateWithoutCaregiverInput> | PatientCaregiverCreateWithoutCaregiverInput[] | PatientCaregiverUncheckedCreateWithoutCaregiverInput[]
    connectOrCreate?: PatientCaregiverCreateOrConnectWithoutCaregiverInput | PatientCaregiverCreateOrConnectWithoutCaregiverInput[]
    createMany?: PatientCaregiverCreateManyCaregiverInputEnvelope
    connect?: PatientCaregiverWhereUniqueInput | PatientCaregiverWhereUniqueInput[]
  }

  export type MedicationUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<MedicationCreateWithoutPatientInput, MedicationUncheckedCreateWithoutPatientInput> | MedicationCreateWithoutPatientInput[] | MedicationUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MedicationCreateOrConnectWithoutPatientInput | MedicationCreateOrConnectWithoutPatientInput[]
    createMany?: MedicationCreateManyPatientInputEnvelope
    connect?: MedicationWhereUniqueInput | MedicationWhereUniqueInput[]
  }

  export type PatientCaregiverUncheckedCreateNestedManyWithoutPatientInput = {
    create?: XOR<PatientCaregiverCreateWithoutPatientInput, PatientCaregiverUncheckedCreateWithoutPatientInput> | PatientCaregiverCreateWithoutPatientInput[] | PatientCaregiverUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PatientCaregiverCreateOrConnectWithoutPatientInput | PatientCaregiverCreateOrConnectWithoutPatientInput[]
    createMany?: PatientCaregiverCreateManyPatientInputEnvelope
    connect?: PatientCaregiverWhereUniqueInput | PatientCaregiverWhereUniqueInput[]
  }

  export type PatientCaregiverUncheckedCreateNestedManyWithoutCaregiverInput = {
    create?: XOR<PatientCaregiverCreateWithoutCaregiverInput, PatientCaregiverUncheckedCreateWithoutCaregiverInput> | PatientCaregiverCreateWithoutCaregiverInput[] | PatientCaregiverUncheckedCreateWithoutCaregiverInput[]
    connectOrCreate?: PatientCaregiverCreateOrConnectWithoutCaregiverInput | PatientCaregiverCreateOrConnectWithoutCaregiverInput[]
    createMany?: PatientCaregiverCreateManyCaregiverInputEnvelope
    connect?: PatientCaregiverWhereUniqueInput | PatientCaregiverWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type MedicationUpdateManyWithoutPatientNestedInput = {
    create?: XOR<MedicationCreateWithoutPatientInput, MedicationUncheckedCreateWithoutPatientInput> | MedicationCreateWithoutPatientInput[] | MedicationUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MedicationCreateOrConnectWithoutPatientInput | MedicationCreateOrConnectWithoutPatientInput[]
    upsert?: MedicationUpsertWithWhereUniqueWithoutPatientInput | MedicationUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: MedicationCreateManyPatientInputEnvelope
    set?: MedicationWhereUniqueInput | MedicationWhereUniqueInput[]
    disconnect?: MedicationWhereUniqueInput | MedicationWhereUniqueInput[]
    delete?: MedicationWhereUniqueInput | MedicationWhereUniqueInput[]
    connect?: MedicationWhereUniqueInput | MedicationWhereUniqueInput[]
    update?: MedicationUpdateWithWhereUniqueWithoutPatientInput | MedicationUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: MedicationUpdateManyWithWhereWithoutPatientInput | MedicationUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: MedicationScalarWhereInput | MedicationScalarWhereInput[]
  }

  export type PatientCaregiverUpdateManyWithoutPatientNestedInput = {
    create?: XOR<PatientCaregiverCreateWithoutPatientInput, PatientCaregiverUncheckedCreateWithoutPatientInput> | PatientCaregiverCreateWithoutPatientInput[] | PatientCaregiverUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PatientCaregiverCreateOrConnectWithoutPatientInput | PatientCaregiverCreateOrConnectWithoutPatientInput[]
    upsert?: PatientCaregiverUpsertWithWhereUniqueWithoutPatientInput | PatientCaregiverUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: PatientCaregiverCreateManyPatientInputEnvelope
    set?: PatientCaregiverWhereUniqueInput | PatientCaregiverWhereUniqueInput[]
    disconnect?: PatientCaregiverWhereUniqueInput | PatientCaregiverWhereUniqueInput[]
    delete?: PatientCaregiverWhereUniqueInput | PatientCaregiverWhereUniqueInput[]
    connect?: PatientCaregiverWhereUniqueInput | PatientCaregiverWhereUniqueInput[]
    update?: PatientCaregiverUpdateWithWhereUniqueWithoutPatientInput | PatientCaregiverUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: PatientCaregiverUpdateManyWithWhereWithoutPatientInput | PatientCaregiverUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: PatientCaregiverScalarWhereInput | PatientCaregiverScalarWhereInput[]
  }

  export type PatientCaregiverUpdateManyWithoutCaregiverNestedInput = {
    create?: XOR<PatientCaregiverCreateWithoutCaregiverInput, PatientCaregiverUncheckedCreateWithoutCaregiverInput> | PatientCaregiverCreateWithoutCaregiverInput[] | PatientCaregiverUncheckedCreateWithoutCaregiverInput[]
    connectOrCreate?: PatientCaregiverCreateOrConnectWithoutCaregiverInput | PatientCaregiverCreateOrConnectWithoutCaregiverInput[]
    upsert?: PatientCaregiverUpsertWithWhereUniqueWithoutCaregiverInput | PatientCaregiverUpsertWithWhereUniqueWithoutCaregiverInput[]
    createMany?: PatientCaregiverCreateManyCaregiverInputEnvelope
    set?: PatientCaregiverWhereUniqueInput | PatientCaregiverWhereUniqueInput[]
    disconnect?: PatientCaregiverWhereUniqueInput | PatientCaregiverWhereUniqueInput[]
    delete?: PatientCaregiverWhereUniqueInput | PatientCaregiverWhereUniqueInput[]
    connect?: PatientCaregiverWhereUniqueInput | PatientCaregiverWhereUniqueInput[]
    update?: PatientCaregiverUpdateWithWhereUniqueWithoutCaregiverInput | PatientCaregiverUpdateWithWhereUniqueWithoutCaregiverInput[]
    updateMany?: PatientCaregiverUpdateManyWithWhereWithoutCaregiverInput | PatientCaregiverUpdateManyWithWhereWithoutCaregiverInput[]
    deleteMany?: PatientCaregiverScalarWhereInput | PatientCaregiverScalarWhereInput[]
  }

  export type MedicationUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<MedicationCreateWithoutPatientInput, MedicationUncheckedCreateWithoutPatientInput> | MedicationCreateWithoutPatientInput[] | MedicationUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: MedicationCreateOrConnectWithoutPatientInput | MedicationCreateOrConnectWithoutPatientInput[]
    upsert?: MedicationUpsertWithWhereUniqueWithoutPatientInput | MedicationUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: MedicationCreateManyPatientInputEnvelope
    set?: MedicationWhereUniqueInput | MedicationWhereUniqueInput[]
    disconnect?: MedicationWhereUniqueInput | MedicationWhereUniqueInput[]
    delete?: MedicationWhereUniqueInput | MedicationWhereUniqueInput[]
    connect?: MedicationWhereUniqueInput | MedicationWhereUniqueInput[]
    update?: MedicationUpdateWithWhereUniqueWithoutPatientInput | MedicationUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: MedicationUpdateManyWithWhereWithoutPatientInput | MedicationUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: MedicationScalarWhereInput | MedicationScalarWhereInput[]
  }

  export type PatientCaregiverUncheckedUpdateManyWithoutPatientNestedInput = {
    create?: XOR<PatientCaregiverCreateWithoutPatientInput, PatientCaregiverUncheckedCreateWithoutPatientInput> | PatientCaregiverCreateWithoutPatientInput[] | PatientCaregiverUncheckedCreateWithoutPatientInput[]
    connectOrCreate?: PatientCaregiverCreateOrConnectWithoutPatientInput | PatientCaregiverCreateOrConnectWithoutPatientInput[]
    upsert?: PatientCaregiverUpsertWithWhereUniqueWithoutPatientInput | PatientCaregiverUpsertWithWhereUniqueWithoutPatientInput[]
    createMany?: PatientCaregiverCreateManyPatientInputEnvelope
    set?: PatientCaregiverWhereUniqueInput | PatientCaregiverWhereUniqueInput[]
    disconnect?: PatientCaregiverWhereUniqueInput | PatientCaregiverWhereUniqueInput[]
    delete?: PatientCaregiverWhereUniqueInput | PatientCaregiverWhereUniqueInput[]
    connect?: PatientCaregiverWhereUniqueInput | PatientCaregiverWhereUniqueInput[]
    update?: PatientCaregiverUpdateWithWhereUniqueWithoutPatientInput | PatientCaregiverUpdateWithWhereUniqueWithoutPatientInput[]
    updateMany?: PatientCaregiverUpdateManyWithWhereWithoutPatientInput | PatientCaregiverUpdateManyWithWhereWithoutPatientInput[]
    deleteMany?: PatientCaregiverScalarWhereInput | PatientCaregiverScalarWhereInput[]
  }

  export type PatientCaregiverUncheckedUpdateManyWithoutCaregiverNestedInput = {
    create?: XOR<PatientCaregiverCreateWithoutCaregiverInput, PatientCaregiverUncheckedCreateWithoutCaregiverInput> | PatientCaregiverCreateWithoutCaregiverInput[] | PatientCaregiverUncheckedCreateWithoutCaregiverInput[]
    connectOrCreate?: PatientCaregiverCreateOrConnectWithoutCaregiverInput | PatientCaregiverCreateOrConnectWithoutCaregiverInput[]
    upsert?: PatientCaregiverUpsertWithWhereUniqueWithoutCaregiverInput | PatientCaregiverUpsertWithWhereUniqueWithoutCaregiverInput[]
    createMany?: PatientCaregiverCreateManyCaregiverInputEnvelope
    set?: PatientCaregiverWhereUniqueInput | PatientCaregiverWhereUniqueInput[]
    disconnect?: PatientCaregiverWhereUniqueInput | PatientCaregiverWhereUniqueInput[]
    delete?: PatientCaregiverWhereUniqueInput | PatientCaregiverWhereUniqueInput[]
    connect?: PatientCaregiverWhereUniqueInput | PatientCaregiverWhereUniqueInput[]
    update?: PatientCaregiverUpdateWithWhereUniqueWithoutCaregiverInput | PatientCaregiverUpdateWithWhereUniqueWithoutCaregiverInput[]
    updateMany?: PatientCaregiverUpdateManyWithWhereWithoutCaregiverInput | PatientCaregiverUpdateManyWithWhereWithoutCaregiverInput[]
    deleteMany?: PatientCaregiverScalarWhereInput | PatientCaregiverScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutMedicationsInput = {
    create?: XOR<UserCreateWithoutMedicationsInput, UserUncheckedCreateWithoutMedicationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMedicationsInput
    connect?: UserWhereUniqueInput
  }

  export type ScheduleCreateNestedManyWithoutMedicationInput = {
    create?: XOR<ScheduleCreateWithoutMedicationInput, ScheduleUncheckedCreateWithoutMedicationInput> | ScheduleCreateWithoutMedicationInput[] | ScheduleUncheckedCreateWithoutMedicationInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutMedicationInput | ScheduleCreateOrConnectWithoutMedicationInput[]
    createMany?: ScheduleCreateManyMedicationInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type IntakeLogCreateNestedManyWithoutMedicationInput = {
    create?: XOR<IntakeLogCreateWithoutMedicationInput, IntakeLogUncheckedCreateWithoutMedicationInput> | IntakeLogCreateWithoutMedicationInput[] | IntakeLogUncheckedCreateWithoutMedicationInput[]
    connectOrCreate?: IntakeLogCreateOrConnectWithoutMedicationInput | IntakeLogCreateOrConnectWithoutMedicationInput[]
    createMany?: IntakeLogCreateManyMedicationInputEnvelope
    connect?: IntakeLogWhereUniqueInput | IntakeLogWhereUniqueInput[]
  }

  export type ScheduleUncheckedCreateNestedManyWithoutMedicationInput = {
    create?: XOR<ScheduleCreateWithoutMedicationInput, ScheduleUncheckedCreateWithoutMedicationInput> | ScheduleCreateWithoutMedicationInput[] | ScheduleUncheckedCreateWithoutMedicationInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutMedicationInput | ScheduleCreateOrConnectWithoutMedicationInput[]
    createMany?: ScheduleCreateManyMedicationInputEnvelope
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
  }

  export type IntakeLogUncheckedCreateNestedManyWithoutMedicationInput = {
    create?: XOR<IntakeLogCreateWithoutMedicationInput, IntakeLogUncheckedCreateWithoutMedicationInput> | IntakeLogCreateWithoutMedicationInput[] | IntakeLogUncheckedCreateWithoutMedicationInput[]
    connectOrCreate?: IntakeLogCreateOrConnectWithoutMedicationInput | IntakeLogCreateOrConnectWithoutMedicationInput[]
    createMany?: IntakeLogCreateManyMedicationInputEnvelope
    connect?: IntakeLogWhereUniqueInput | IntakeLogWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneRequiredWithoutMedicationsNestedInput = {
    create?: XOR<UserCreateWithoutMedicationsInput, UserUncheckedCreateWithoutMedicationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMedicationsInput
    upsert?: UserUpsertWithoutMedicationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMedicationsInput, UserUpdateWithoutMedicationsInput>, UserUncheckedUpdateWithoutMedicationsInput>
  }

  export type ScheduleUpdateManyWithoutMedicationNestedInput = {
    create?: XOR<ScheduleCreateWithoutMedicationInput, ScheduleUncheckedCreateWithoutMedicationInput> | ScheduleCreateWithoutMedicationInput[] | ScheduleUncheckedCreateWithoutMedicationInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutMedicationInput | ScheduleCreateOrConnectWithoutMedicationInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutMedicationInput | ScheduleUpsertWithWhereUniqueWithoutMedicationInput[]
    createMany?: ScheduleCreateManyMedicationInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutMedicationInput | ScheduleUpdateWithWhereUniqueWithoutMedicationInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutMedicationInput | ScheduleUpdateManyWithWhereWithoutMedicationInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type IntakeLogUpdateManyWithoutMedicationNestedInput = {
    create?: XOR<IntakeLogCreateWithoutMedicationInput, IntakeLogUncheckedCreateWithoutMedicationInput> | IntakeLogCreateWithoutMedicationInput[] | IntakeLogUncheckedCreateWithoutMedicationInput[]
    connectOrCreate?: IntakeLogCreateOrConnectWithoutMedicationInput | IntakeLogCreateOrConnectWithoutMedicationInput[]
    upsert?: IntakeLogUpsertWithWhereUniqueWithoutMedicationInput | IntakeLogUpsertWithWhereUniqueWithoutMedicationInput[]
    createMany?: IntakeLogCreateManyMedicationInputEnvelope
    set?: IntakeLogWhereUniqueInput | IntakeLogWhereUniqueInput[]
    disconnect?: IntakeLogWhereUniqueInput | IntakeLogWhereUniqueInput[]
    delete?: IntakeLogWhereUniqueInput | IntakeLogWhereUniqueInput[]
    connect?: IntakeLogWhereUniqueInput | IntakeLogWhereUniqueInput[]
    update?: IntakeLogUpdateWithWhereUniqueWithoutMedicationInput | IntakeLogUpdateWithWhereUniqueWithoutMedicationInput[]
    updateMany?: IntakeLogUpdateManyWithWhereWithoutMedicationInput | IntakeLogUpdateManyWithWhereWithoutMedicationInput[]
    deleteMany?: IntakeLogScalarWhereInput | IntakeLogScalarWhereInput[]
  }

  export type ScheduleUncheckedUpdateManyWithoutMedicationNestedInput = {
    create?: XOR<ScheduleCreateWithoutMedicationInput, ScheduleUncheckedCreateWithoutMedicationInput> | ScheduleCreateWithoutMedicationInput[] | ScheduleUncheckedCreateWithoutMedicationInput[]
    connectOrCreate?: ScheduleCreateOrConnectWithoutMedicationInput | ScheduleCreateOrConnectWithoutMedicationInput[]
    upsert?: ScheduleUpsertWithWhereUniqueWithoutMedicationInput | ScheduleUpsertWithWhereUniqueWithoutMedicationInput[]
    createMany?: ScheduleCreateManyMedicationInputEnvelope
    set?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    disconnect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    delete?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    connect?: ScheduleWhereUniqueInput | ScheduleWhereUniqueInput[]
    update?: ScheduleUpdateWithWhereUniqueWithoutMedicationInput | ScheduleUpdateWithWhereUniqueWithoutMedicationInput[]
    updateMany?: ScheduleUpdateManyWithWhereWithoutMedicationInput | ScheduleUpdateManyWithWhereWithoutMedicationInput[]
    deleteMany?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
  }

  export type IntakeLogUncheckedUpdateManyWithoutMedicationNestedInput = {
    create?: XOR<IntakeLogCreateWithoutMedicationInput, IntakeLogUncheckedCreateWithoutMedicationInput> | IntakeLogCreateWithoutMedicationInput[] | IntakeLogUncheckedCreateWithoutMedicationInput[]
    connectOrCreate?: IntakeLogCreateOrConnectWithoutMedicationInput | IntakeLogCreateOrConnectWithoutMedicationInput[]
    upsert?: IntakeLogUpsertWithWhereUniqueWithoutMedicationInput | IntakeLogUpsertWithWhereUniqueWithoutMedicationInput[]
    createMany?: IntakeLogCreateManyMedicationInputEnvelope
    set?: IntakeLogWhereUniqueInput | IntakeLogWhereUniqueInput[]
    disconnect?: IntakeLogWhereUniqueInput | IntakeLogWhereUniqueInput[]
    delete?: IntakeLogWhereUniqueInput | IntakeLogWhereUniqueInput[]
    connect?: IntakeLogWhereUniqueInput | IntakeLogWhereUniqueInput[]
    update?: IntakeLogUpdateWithWhereUniqueWithoutMedicationInput | IntakeLogUpdateWithWhereUniqueWithoutMedicationInput[]
    updateMany?: IntakeLogUpdateManyWithWhereWithoutMedicationInput | IntakeLogUpdateManyWithWhereWithoutMedicationInput[]
    deleteMany?: IntakeLogScalarWhereInput | IntakeLogScalarWhereInput[]
  }

  export type MedicationCreateNestedOneWithoutSchedulesInput = {
    create?: XOR<MedicationCreateWithoutSchedulesInput, MedicationUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: MedicationCreateOrConnectWithoutSchedulesInput
    connect?: MedicationWhereUniqueInput
  }

  export type IntakeLogCreateNestedManyWithoutScheduleInput = {
    create?: XOR<IntakeLogCreateWithoutScheduleInput, IntakeLogUncheckedCreateWithoutScheduleInput> | IntakeLogCreateWithoutScheduleInput[] | IntakeLogUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: IntakeLogCreateOrConnectWithoutScheduleInput | IntakeLogCreateOrConnectWithoutScheduleInput[]
    createMany?: IntakeLogCreateManyScheduleInputEnvelope
    connect?: IntakeLogWhereUniqueInput | IntakeLogWhereUniqueInput[]
  }

  export type IntakeLogUncheckedCreateNestedManyWithoutScheduleInput = {
    create?: XOR<IntakeLogCreateWithoutScheduleInput, IntakeLogUncheckedCreateWithoutScheduleInput> | IntakeLogCreateWithoutScheduleInput[] | IntakeLogUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: IntakeLogCreateOrConnectWithoutScheduleInput | IntakeLogCreateOrConnectWithoutScheduleInput[]
    createMany?: IntakeLogCreateManyScheduleInputEnvelope
    connect?: IntakeLogWhereUniqueInput | IntakeLogWhereUniqueInput[]
  }

  export type MedicationUpdateOneRequiredWithoutSchedulesNestedInput = {
    create?: XOR<MedicationCreateWithoutSchedulesInput, MedicationUncheckedCreateWithoutSchedulesInput>
    connectOrCreate?: MedicationCreateOrConnectWithoutSchedulesInput
    upsert?: MedicationUpsertWithoutSchedulesInput
    connect?: MedicationWhereUniqueInput
    update?: XOR<XOR<MedicationUpdateToOneWithWhereWithoutSchedulesInput, MedicationUpdateWithoutSchedulesInput>, MedicationUncheckedUpdateWithoutSchedulesInput>
  }

  export type IntakeLogUpdateManyWithoutScheduleNestedInput = {
    create?: XOR<IntakeLogCreateWithoutScheduleInput, IntakeLogUncheckedCreateWithoutScheduleInput> | IntakeLogCreateWithoutScheduleInput[] | IntakeLogUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: IntakeLogCreateOrConnectWithoutScheduleInput | IntakeLogCreateOrConnectWithoutScheduleInput[]
    upsert?: IntakeLogUpsertWithWhereUniqueWithoutScheduleInput | IntakeLogUpsertWithWhereUniqueWithoutScheduleInput[]
    createMany?: IntakeLogCreateManyScheduleInputEnvelope
    set?: IntakeLogWhereUniqueInput | IntakeLogWhereUniqueInput[]
    disconnect?: IntakeLogWhereUniqueInput | IntakeLogWhereUniqueInput[]
    delete?: IntakeLogWhereUniqueInput | IntakeLogWhereUniqueInput[]
    connect?: IntakeLogWhereUniqueInput | IntakeLogWhereUniqueInput[]
    update?: IntakeLogUpdateWithWhereUniqueWithoutScheduleInput | IntakeLogUpdateWithWhereUniqueWithoutScheduleInput[]
    updateMany?: IntakeLogUpdateManyWithWhereWithoutScheduleInput | IntakeLogUpdateManyWithWhereWithoutScheduleInput[]
    deleteMany?: IntakeLogScalarWhereInput | IntakeLogScalarWhereInput[]
  }

  export type IntakeLogUncheckedUpdateManyWithoutScheduleNestedInput = {
    create?: XOR<IntakeLogCreateWithoutScheduleInput, IntakeLogUncheckedCreateWithoutScheduleInput> | IntakeLogCreateWithoutScheduleInput[] | IntakeLogUncheckedCreateWithoutScheduleInput[]
    connectOrCreate?: IntakeLogCreateOrConnectWithoutScheduleInput | IntakeLogCreateOrConnectWithoutScheduleInput[]
    upsert?: IntakeLogUpsertWithWhereUniqueWithoutScheduleInput | IntakeLogUpsertWithWhereUniqueWithoutScheduleInput[]
    createMany?: IntakeLogCreateManyScheduleInputEnvelope
    set?: IntakeLogWhereUniqueInput | IntakeLogWhereUniqueInput[]
    disconnect?: IntakeLogWhereUniqueInput | IntakeLogWhereUniqueInput[]
    delete?: IntakeLogWhereUniqueInput | IntakeLogWhereUniqueInput[]
    connect?: IntakeLogWhereUniqueInput | IntakeLogWhereUniqueInput[]
    update?: IntakeLogUpdateWithWhereUniqueWithoutScheduleInput | IntakeLogUpdateWithWhereUniqueWithoutScheduleInput[]
    updateMany?: IntakeLogUpdateManyWithWhereWithoutScheduleInput | IntakeLogUpdateManyWithWhereWithoutScheduleInput[]
    deleteMany?: IntakeLogScalarWhereInput | IntakeLogScalarWhereInput[]
  }

  export type MedicationCreateNestedOneWithoutIntakesInput = {
    create?: XOR<MedicationCreateWithoutIntakesInput, MedicationUncheckedCreateWithoutIntakesInput>
    connectOrCreate?: MedicationCreateOrConnectWithoutIntakesInput
    connect?: MedicationWhereUniqueInput
  }

  export type ScheduleCreateNestedOneWithoutIntakesInput = {
    create?: XOR<ScheduleCreateWithoutIntakesInput, ScheduleUncheckedCreateWithoutIntakesInput>
    connectOrCreate?: ScheduleCreateOrConnectWithoutIntakesInput
    connect?: ScheduleWhereUniqueInput
  }

  export type MedicationUpdateOneRequiredWithoutIntakesNestedInput = {
    create?: XOR<MedicationCreateWithoutIntakesInput, MedicationUncheckedCreateWithoutIntakesInput>
    connectOrCreate?: MedicationCreateOrConnectWithoutIntakesInput
    upsert?: MedicationUpsertWithoutIntakesInput
    connect?: MedicationWhereUniqueInput
    update?: XOR<XOR<MedicationUpdateToOneWithWhereWithoutIntakesInput, MedicationUpdateWithoutIntakesInput>, MedicationUncheckedUpdateWithoutIntakesInput>
  }

  export type ScheduleUpdateOneWithoutIntakesNestedInput = {
    create?: XOR<ScheduleCreateWithoutIntakesInput, ScheduleUncheckedCreateWithoutIntakesInput>
    connectOrCreate?: ScheduleCreateOrConnectWithoutIntakesInput
    upsert?: ScheduleUpsertWithoutIntakesInput
    disconnect?: ScheduleWhereInput | boolean
    delete?: ScheduleWhereInput | boolean
    connect?: ScheduleWhereUniqueInput
    update?: XOR<XOR<ScheduleUpdateToOneWithWhereWithoutIntakesInput, ScheduleUpdateWithoutIntakesInput>, ScheduleUncheckedUpdateWithoutIntakesInput>
  }

  export type UserCreateNestedOneWithoutPatientLinksInput = {
    create?: XOR<UserCreateWithoutPatientLinksInput, UserUncheckedCreateWithoutPatientLinksInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatientLinksInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCaregiverLinksInput = {
    create?: XOR<UserCreateWithoutCaregiverLinksInput, UserUncheckedCreateWithoutCaregiverLinksInput>
    connectOrCreate?: UserCreateOrConnectWithoutCaregiverLinksInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPatientLinksNestedInput = {
    create?: XOR<UserCreateWithoutPatientLinksInput, UserUncheckedCreateWithoutPatientLinksInput>
    connectOrCreate?: UserCreateOrConnectWithoutPatientLinksInput
    upsert?: UserUpsertWithoutPatientLinksInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPatientLinksInput, UserUpdateWithoutPatientLinksInput>, UserUncheckedUpdateWithoutPatientLinksInput>
  }

  export type UserUpdateOneRequiredWithoutCaregiverLinksNestedInput = {
    create?: XOR<UserCreateWithoutCaregiverLinksInput, UserUncheckedCreateWithoutCaregiverLinksInput>
    connectOrCreate?: UserCreateOrConnectWithoutCaregiverLinksInput
    upsert?: UserUpsertWithoutCaregiverLinksInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCaregiverLinksInput, UserUpdateWithoutCaregiverLinksInput>, UserUncheckedUpdateWithoutCaregiverLinksInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type MedicationCreateWithoutPatientInput = {
    id?: string
    name: string
    dosage?: string | null
    quantity?: number | null
    presentation?: string | null
    instructions?: string | null
    color?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    schedules?: ScheduleCreateNestedManyWithoutMedicationInput
    intakes?: IntakeLogCreateNestedManyWithoutMedicationInput
  }

  export type MedicationUncheckedCreateWithoutPatientInput = {
    id?: string
    name: string
    dosage?: string | null
    quantity?: number | null
    presentation?: string | null
    instructions?: string | null
    color?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutMedicationInput
    intakes?: IntakeLogUncheckedCreateNestedManyWithoutMedicationInput
  }

  export type MedicationCreateOrConnectWithoutPatientInput = {
    where: MedicationWhereUniqueInput
    create: XOR<MedicationCreateWithoutPatientInput, MedicationUncheckedCreateWithoutPatientInput>
  }

  export type MedicationCreateManyPatientInputEnvelope = {
    data: MedicationCreateManyPatientInput | MedicationCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type PatientCaregiverCreateWithoutPatientInput = {
    id?: string
    relation?: string | null
    createdAt?: Date | string
    caregiver: UserCreateNestedOneWithoutCaregiverLinksInput
  }

  export type PatientCaregiverUncheckedCreateWithoutPatientInput = {
    id?: string
    caregiverId: string
    relation?: string | null
    createdAt?: Date | string
  }

  export type PatientCaregiverCreateOrConnectWithoutPatientInput = {
    where: PatientCaregiverWhereUniqueInput
    create: XOR<PatientCaregiverCreateWithoutPatientInput, PatientCaregiverUncheckedCreateWithoutPatientInput>
  }

  export type PatientCaregiverCreateManyPatientInputEnvelope = {
    data: PatientCaregiverCreateManyPatientInput | PatientCaregiverCreateManyPatientInput[]
    skipDuplicates?: boolean
  }

  export type PatientCaregiverCreateWithoutCaregiverInput = {
    id?: string
    relation?: string | null
    createdAt?: Date | string
    patient: UserCreateNestedOneWithoutPatientLinksInput
  }

  export type PatientCaregiverUncheckedCreateWithoutCaregiverInput = {
    id?: string
    patientId: string
    relation?: string | null
    createdAt?: Date | string
  }

  export type PatientCaregiverCreateOrConnectWithoutCaregiverInput = {
    where: PatientCaregiverWhereUniqueInput
    create: XOR<PatientCaregiverCreateWithoutCaregiverInput, PatientCaregiverUncheckedCreateWithoutCaregiverInput>
  }

  export type PatientCaregiverCreateManyCaregiverInputEnvelope = {
    data: PatientCaregiverCreateManyCaregiverInput | PatientCaregiverCreateManyCaregiverInput[]
    skipDuplicates?: boolean
  }

  export type MedicationUpsertWithWhereUniqueWithoutPatientInput = {
    where: MedicationWhereUniqueInput
    update: XOR<MedicationUpdateWithoutPatientInput, MedicationUncheckedUpdateWithoutPatientInput>
    create: XOR<MedicationCreateWithoutPatientInput, MedicationUncheckedCreateWithoutPatientInput>
  }

  export type MedicationUpdateWithWhereUniqueWithoutPatientInput = {
    where: MedicationWhereUniqueInput
    data: XOR<MedicationUpdateWithoutPatientInput, MedicationUncheckedUpdateWithoutPatientInput>
  }

  export type MedicationUpdateManyWithWhereWithoutPatientInput = {
    where: MedicationScalarWhereInput
    data: XOR<MedicationUpdateManyMutationInput, MedicationUncheckedUpdateManyWithoutPatientInput>
  }

  export type MedicationScalarWhereInput = {
    AND?: MedicationScalarWhereInput | MedicationScalarWhereInput[]
    OR?: MedicationScalarWhereInput[]
    NOT?: MedicationScalarWhereInput | MedicationScalarWhereInput[]
    id?: StringFilter<"Medication"> | string
    patientId?: StringFilter<"Medication"> | string
    name?: StringFilter<"Medication"> | string
    dosage?: StringNullableFilter<"Medication"> | string | null
    quantity?: IntNullableFilter<"Medication"> | number | null
    presentation?: StringNullableFilter<"Medication"> | string | null
    instructions?: StringNullableFilter<"Medication"> | string | null
    color?: StringNullableFilter<"Medication"> | string | null
    active?: BoolFilter<"Medication"> | boolean
    createdAt?: DateTimeFilter<"Medication"> | Date | string
    updatedAt?: DateTimeFilter<"Medication"> | Date | string
    deletedAt?: DateTimeNullableFilter<"Medication"> | Date | string | null
  }

  export type PatientCaregiverUpsertWithWhereUniqueWithoutPatientInput = {
    where: PatientCaregiverWhereUniqueInput
    update: XOR<PatientCaregiverUpdateWithoutPatientInput, PatientCaregiverUncheckedUpdateWithoutPatientInput>
    create: XOR<PatientCaregiverCreateWithoutPatientInput, PatientCaregiverUncheckedCreateWithoutPatientInput>
  }

  export type PatientCaregiverUpdateWithWhereUniqueWithoutPatientInput = {
    where: PatientCaregiverWhereUniqueInput
    data: XOR<PatientCaregiverUpdateWithoutPatientInput, PatientCaregiverUncheckedUpdateWithoutPatientInput>
  }

  export type PatientCaregiverUpdateManyWithWhereWithoutPatientInput = {
    where: PatientCaregiverScalarWhereInput
    data: XOR<PatientCaregiverUpdateManyMutationInput, PatientCaregiverUncheckedUpdateManyWithoutPatientInput>
  }

  export type PatientCaregiverScalarWhereInput = {
    AND?: PatientCaregiverScalarWhereInput | PatientCaregiverScalarWhereInput[]
    OR?: PatientCaregiverScalarWhereInput[]
    NOT?: PatientCaregiverScalarWhereInput | PatientCaregiverScalarWhereInput[]
    id?: StringFilter<"PatientCaregiver"> | string
    patientId?: StringFilter<"PatientCaregiver"> | string
    caregiverId?: StringFilter<"PatientCaregiver"> | string
    relation?: StringNullableFilter<"PatientCaregiver"> | string | null
    createdAt?: DateTimeFilter<"PatientCaregiver"> | Date | string
  }

  export type PatientCaregiverUpsertWithWhereUniqueWithoutCaregiverInput = {
    where: PatientCaregiverWhereUniqueInput
    update: XOR<PatientCaregiverUpdateWithoutCaregiverInput, PatientCaregiverUncheckedUpdateWithoutCaregiverInput>
    create: XOR<PatientCaregiverCreateWithoutCaregiverInput, PatientCaregiverUncheckedCreateWithoutCaregiverInput>
  }

  export type PatientCaregiverUpdateWithWhereUniqueWithoutCaregiverInput = {
    where: PatientCaregiverWhereUniqueInput
    data: XOR<PatientCaregiverUpdateWithoutCaregiverInput, PatientCaregiverUncheckedUpdateWithoutCaregiverInput>
  }

  export type PatientCaregiverUpdateManyWithWhereWithoutCaregiverInput = {
    where: PatientCaregiverScalarWhereInput
    data: XOR<PatientCaregiverUpdateManyMutationInput, PatientCaregiverUncheckedUpdateManyWithoutCaregiverInput>
  }

  export type UserCreateWithoutMedicationsInput = {
    id?: string
    firstName: string
    lastName: string
    email?: string | null
    phone?: string | null
    role?: string
    password?: string | null
    birthDate?: string | null
    address?: string | null
    emergencyContact?: string | null
    emergencyPhone?: string | null
    medicalConditions?: string | null
    allergies?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patientLinks?: PatientCaregiverCreateNestedManyWithoutPatientInput
    caregiverLinks?: PatientCaregiverCreateNestedManyWithoutCaregiverInput
  }

  export type UserUncheckedCreateWithoutMedicationsInput = {
    id?: string
    firstName: string
    lastName: string
    email?: string | null
    phone?: string | null
    role?: string
    password?: string | null
    birthDate?: string | null
    address?: string | null
    emergencyContact?: string | null
    emergencyPhone?: string | null
    medicalConditions?: string | null
    allergies?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    patientLinks?: PatientCaregiverUncheckedCreateNestedManyWithoutPatientInput
    caregiverLinks?: PatientCaregiverUncheckedCreateNestedManyWithoutCaregiverInput
  }

  export type UserCreateOrConnectWithoutMedicationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMedicationsInput, UserUncheckedCreateWithoutMedicationsInput>
  }

  export type ScheduleCreateWithoutMedicationInput = {
    id?: string
    time: string
    frequencyType: string
    frequencyValue?: number | null
    daysOfWeek?: string | null
    endDate?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    intakes?: IntakeLogCreateNestedManyWithoutScheduleInput
  }

  export type ScheduleUncheckedCreateWithoutMedicationInput = {
    id?: string
    time: string
    frequencyType: string
    frequencyValue?: number | null
    daysOfWeek?: string | null
    endDate?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    intakes?: IntakeLogUncheckedCreateNestedManyWithoutScheduleInput
  }

  export type ScheduleCreateOrConnectWithoutMedicationInput = {
    where: ScheduleWhereUniqueInput
    create: XOR<ScheduleCreateWithoutMedicationInput, ScheduleUncheckedCreateWithoutMedicationInput>
  }

  export type ScheduleCreateManyMedicationInputEnvelope = {
    data: ScheduleCreateManyMedicationInput | ScheduleCreateManyMedicationInput[]
    skipDuplicates?: boolean
  }

  export type IntakeLogCreateWithoutMedicationInput = {
    id?: string
    scheduledFor: Date | string
    action: string
    actionAt: Date | string
    note?: string | null
    createdAt?: Date | string
    schedule?: ScheduleCreateNestedOneWithoutIntakesInput
  }

  export type IntakeLogUncheckedCreateWithoutMedicationInput = {
    id?: string
    scheduleId?: string | null
    scheduledFor: Date | string
    action: string
    actionAt: Date | string
    note?: string | null
    createdAt?: Date | string
  }

  export type IntakeLogCreateOrConnectWithoutMedicationInput = {
    where: IntakeLogWhereUniqueInput
    create: XOR<IntakeLogCreateWithoutMedicationInput, IntakeLogUncheckedCreateWithoutMedicationInput>
  }

  export type IntakeLogCreateManyMedicationInputEnvelope = {
    data: IntakeLogCreateManyMedicationInput | IntakeLogCreateManyMedicationInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutMedicationsInput = {
    update: XOR<UserUpdateWithoutMedicationsInput, UserUncheckedUpdateWithoutMedicationsInput>
    create: XOR<UserCreateWithoutMedicationsInput, UserUncheckedCreateWithoutMedicationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMedicationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMedicationsInput, UserUncheckedUpdateWithoutMedicationsInput>
  }

  export type UserUpdateWithoutMedicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyPhone?: NullableStringFieldUpdateOperationsInput | string | null
    medicalConditions?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientLinks?: PatientCaregiverUpdateManyWithoutPatientNestedInput
    caregiverLinks?: PatientCaregiverUpdateManyWithoutCaregiverNestedInput
  }

  export type UserUncheckedUpdateWithoutMedicationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyPhone?: NullableStringFieldUpdateOperationsInput | string | null
    medicalConditions?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patientLinks?: PatientCaregiverUncheckedUpdateManyWithoutPatientNestedInput
    caregiverLinks?: PatientCaregiverUncheckedUpdateManyWithoutCaregiverNestedInput
  }

  export type ScheduleUpsertWithWhereUniqueWithoutMedicationInput = {
    where: ScheduleWhereUniqueInput
    update: XOR<ScheduleUpdateWithoutMedicationInput, ScheduleUncheckedUpdateWithoutMedicationInput>
    create: XOR<ScheduleCreateWithoutMedicationInput, ScheduleUncheckedCreateWithoutMedicationInput>
  }

  export type ScheduleUpdateWithWhereUniqueWithoutMedicationInput = {
    where: ScheduleWhereUniqueInput
    data: XOR<ScheduleUpdateWithoutMedicationInput, ScheduleUncheckedUpdateWithoutMedicationInput>
  }

  export type ScheduleUpdateManyWithWhereWithoutMedicationInput = {
    where: ScheduleScalarWhereInput
    data: XOR<ScheduleUpdateManyMutationInput, ScheduleUncheckedUpdateManyWithoutMedicationInput>
  }

  export type ScheduleScalarWhereInput = {
    AND?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
    OR?: ScheduleScalarWhereInput[]
    NOT?: ScheduleScalarWhereInput | ScheduleScalarWhereInput[]
    id?: StringFilter<"Schedule"> | string
    medicationId?: StringFilter<"Schedule"> | string
    time?: StringFilter<"Schedule"> | string
    frequencyType?: StringFilter<"Schedule"> | string
    frequencyValue?: IntNullableFilter<"Schedule"> | number | null
    daysOfWeek?: StringNullableFilter<"Schedule"> | string | null
    endDate?: StringNullableFilter<"Schedule"> | string | null
    active?: BoolFilter<"Schedule"> | boolean
    createdAt?: DateTimeFilter<"Schedule"> | Date | string
    updatedAt?: DateTimeFilter<"Schedule"> | Date | string
  }

  export type IntakeLogUpsertWithWhereUniqueWithoutMedicationInput = {
    where: IntakeLogWhereUniqueInput
    update: XOR<IntakeLogUpdateWithoutMedicationInput, IntakeLogUncheckedUpdateWithoutMedicationInput>
    create: XOR<IntakeLogCreateWithoutMedicationInput, IntakeLogUncheckedCreateWithoutMedicationInput>
  }

  export type IntakeLogUpdateWithWhereUniqueWithoutMedicationInput = {
    where: IntakeLogWhereUniqueInput
    data: XOR<IntakeLogUpdateWithoutMedicationInput, IntakeLogUncheckedUpdateWithoutMedicationInput>
  }

  export type IntakeLogUpdateManyWithWhereWithoutMedicationInput = {
    where: IntakeLogScalarWhereInput
    data: XOR<IntakeLogUpdateManyMutationInput, IntakeLogUncheckedUpdateManyWithoutMedicationInput>
  }

  export type IntakeLogScalarWhereInput = {
    AND?: IntakeLogScalarWhereInput | IntakeLogScalarWhereInput[]
    OR?: IntakeLogScalarWhereInput[]
    NOT?: IntakeLogScalarWhereInput | IntakeLogScalarWhereInput[]
    id?: StringFilter<"IntakeLog"> | string
    medicationId?: StringFilter<"IntakeLog"> | string
    scheduleId?: StringNullableFilter<"IntakeLog"> | string | null
    scheduledFor?: DateTimeFilter<"IntakeLog"> | Date | string
    action?: StringFilter<"IntakeLog"> | string
    actionAt?: DateTimeFilter<"IntakeLog"> | Date | string
    note?: StringNullableFilter<"IntakeLog"> | string | null
    createdAt?: DateTimeFilter<"IntakeLog"> | Date | string
  }

  export type MedicationCreateWithoutSchedulesInput = {
    id?: string
    name: string
    dosage?: string | null
    quantity?: number | null
    presentation?: string | null
    instructions?: string | null
    color?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    patient: UserCreateNestedOneWithoutMedicationsInput
    intakes?: IntakeLogCreateNestedManyWithoutMedicationInput
  }

  export type MedicationUncheckedCreateWithoutSchedulesInput = {
    id?: string
    patientId: string
    name: string
    dosage?: string | null
    quantity?: number | null
    presentation?: string | null
    instructions?: string | null
    color?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    intakes?: IntakeLogUncheckedCreateNestedManyWithoutMedicationInput
  }

  export type MedicationCreateOrConnectWithoutSchedulesInput = {
    where: MedicationWhereUniqueInput
    create: XOR<MedicationCreateWithoutSchedulesInput, MedicationUncheckedCreateWithoutSchedulesInput>
  }

  export type IntakeLogCreateWithoutScheduleInput = {
    id?: string
    scheduledFor: Date | string
    action: string
    actionAt: Date | string
    note?: string | null
    createdAt?: Date | string
    medication: MedicationCreateNestedOneWithoutIntakesInput
  }

  export type IntakeLogUncheckedCreateWithoutScheduleInput = {
    id?: string
    medicationId: string
    scheduledFor: Date | string
    action: string
    actionAt: Date | string
    note?: string | null
    createdAt?: Date | string
  }

  export type IntakeLogCreateOrConnectWithoutScheduleInput = {
    where: IntakeLogWhereUniqueInput
    create: XOR<IntakeLogCreateWithoutScheduleInput, IntakeLogUncheckedCreateWithoutScheduleInput>
  }

  export type IntakeLogCreateManyScheduleInputEnvelope = {
    data: IntakeLogCreateManyScheduleInput | IntakeLogCreateManyScheduleInput[]
    skipDuplicates?: boolean
  }

  export type MedicationUpsertWithoutSchedulesInput = {
    update: XOR<MedicationUpdateWithoutSchedulesInput, MedicationUncheckedUpdateWithoutSchedulesInput>
    create: XOR<MedicationCreateWithoutSchedulesInput, MedicationUncheckedCreateWithoutSchedulesInput>
    where?: MedicationWhereInput
  }

  export type MedicationUpdateToOneWithWhereWithoutSchedulesInput = {
    where?: MedicationWhereInput
    data: XOR<MedicationUpdateWithoutSchedulesInput, MedicationUncheckedUpdateWithoutSchedulesInput>
  }

  export type MedicationUpdateWithoutSchedulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dosage?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    presentation?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: UserUpdateOneRequiredWithoutMedicationsNestedInput
    intakes?: IntakeLogUpdateManyWithoutMedicationNestedInput
  }

  export type MedicationUncheckedUpdateWithoutSchedulesInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dosage?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    presentation?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    intakes?: IntakeLogUncheckedUpdateManyWithoutMedicationNestedInput
  }

  export type IntakeLogUpsertWithWhereUniqueWithoutScheduleInput = {
    where: IntakeLogWhereUniqueInput
    update: XOR<IntakeLogUpdateWithoutScheduleInput, IntakeLogUncheckedUpdateWithoutScheduleInput>
    create: XOR<IntakeLogCreateWithoutScheduleInput, IntakeLogUncheckedCreateWithoutScheduleInput>
  }

  export type IntakeLogUpdateWithWhereUniqueWithoutScheduleInput = {
    where: IntakeLogWhereUniqueInput
    data: XOR<IntakeLogUpdateWithoutScheduleInput, IntakeLogUncheckedUpdateWithoutScheduleInput>
  }

  export type IntakeLogUpdateManyWithWhereWithoutScheduleInput = {
    where: IntakeLogScalarWhereInput
    data: XOR<IntakeLogUpdateManyMutationInput, IntakeLogUncheckedUpdateManyWithoutScheduleInput>
  }

  export type MedicationCreateWithoutIntakesInput = {
    id?: string
    name: string
    dosage?: string | null
    quantity?: number | null
    presentation?: string | null
    instructions?: string | null
    color?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    patient: UserCreateNestedOneWithoutMedicationsInput
    schedules?: ScheduleCreateNestedManyWithoutMedicationInput
  }

  export type MedicationUncheckedCreateWithoutIntakesInput = {
    id?: string
    patientId: string
    name: string
    dosage?: string | null
    quantity?: number | null
    presentation?: string | null
    instructions?: string | null
    color?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
    schedules?: ScheduleUncheckedCreateNestedManyWithoutMedicationInput
  }

  export type MedicationCreateOrConnectWithoutIntakesInput = {
    where: MedicationWhereUniqueInput
    create: XOR<MedicationCreateWithoutIntakesInput, MedicationUncheckedCreateWithoutIntakesInput>
  }

  export type ScheduleCreateWithoutIntakesInput = {
    id?: string
    time: string
    frequencyType: string
    frequencyValue?: number | null
    daysOfWeek?: string | null
    endDate?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    medication: MedicationCreateNestedOneWithoutSchedulesInput
  }

  export type ScheduleUncheckedCreateWithoutIntakesInput = {
    id?: string
    medicationId: string
    time: string
    frequencyType: string
    frequencyValue?: number | null
    daysOfWeek?: string | null
    endDate?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScheduleCreateOrConnectWithoutIntakesInput = {
    where: ScheduleWhereUniqueInput
    create: XOR<ScheduleCreateWithoutIntakesInput, ScheduleUncheckedCreateWithoutIntakesInput>
  }

  export type MedicationUpsertWithoutIntakesInput = {
    update: XOR<MedicationUpdateWithoutIntakesInput, MedicationUncheckedUpdateWithoutIntakesInput>
    create: XOR<MedicationCreateWithoutIntakesInput, MedicationUncheckedCreateWithoutIntakesInput>
    where?: MedicationWhereInput
  }

  export type MedicationUpdateToOneWithWhereWithoutIntakesInput = {
    where?: MedicationWhereInput
    data: XOR<MedicationUpdateWithoutIntakesInput, MedicationUncheckedUpdateWithoutIntakesInput>
  }

  export type MedicationUpdateWithoutIntakesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dosage?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    presentation?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    patient?: UserUpdateOneRequiredWithoutMedicationsNestedInput
    schedules?: ScheduleUpdateManyWithoutMedicationNestedInput
  }

  export type MedicationUncheckedUpdateWithoutIntakesInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dosage?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    presentation?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutMedicationNestedInput
  }

  export type ScheduleUpsertWithoutIntakesInput = {
    update: XOR<ScheduleUpdateWithoutIntakesInput, ScheduleUncheckedUpdateWithoutIntakesInput>
    create: XOR<ScheduleCreateWithoutIntakesInput, ScheduleUncheckedCreateWithoutIntakesInput>
    where?: ScheduleWhereInput
  }

  export type ScheduleUpdateToOneWithWhereWithoutIntakesInput = {
    where?: ScheduleWhereInput
    data: XOR<ScheduleUpdateWithoutIntakesInput, ScheduleUncheckedUpdateWithoutIntakesInput>
  }

  export type ScheduleUpdateWithoutIntakesInput = {
    id?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    frequencyType?: StringFieldUpdateOperationsInput | string
    frequencyValue?: NullableIntFieldUpdateOperationsInput | number | null
    daysOfWeek?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medication?: MedicationUpdateOneRequiredWithoutSchedulesNestedInput
  }

  export type ScheduleUncheckedUpdateWithoutIntakesInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicationId?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    frequencyType?: StringFieldUpdateOperationsInput | string
    frequencyValue?: NullableIntFieldUpdateOperationsInput | number | null
    daysOfWeek?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateWithoutPatientLinksInput = {
    id?: string
    firstName: string
    lastName: string
    email?: string | null
    phone?: string | null
    role?: string
    password?: string | null
    birthDate?: string | null
    address?: string | null
    emergencyContact?: string | null
    emergencyPhone?: string | null
    medicalConditions?: string | null
    allergies?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    medications?: MedicationCreateNestedManyWithoutPatientInput
    caregiverLinks?: PatientCaregiverCreateNestedManyWithoutCaregiverInput
  }

  export type UserUncheckedCreateWithoutPatientLinksInput = {
    id?: string
    firstName: string
    lastName: string
    email?: string | null
    phone?: string | null
    role?: string
    password?: string | null
    birthDate?: string | null
    address?: string | null
    emergencyContact?: string | null
    emergencyPhone?: string | null
    medicalConditions?: string | null
    allergies?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    medications?: MedicationUncheckedCreateNestedManyWithoutPatientInput
    caregiverLinks?: PatientCaregiverUncheckedCreateNestedManyWithoutCaregiverInput
  }

  export type UserCreateOrConnectWithoutPatientLinksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPatientLinksInput, UserUncheckedCreateWithoutPatientLinksInput>
  }

  export type UserCreateWithoutCaregiverLinksInput = {
    id?: string
    firstName: string
    lastName: string
    email?: string | null
    phone?: string | null
    role?: string
    password?: string | null
    birthDate?: string | null
    address?: string | null
    emergencyContact?: string | null
    emergencyPhone?: string | null
    medicalConditions?: string | null
    allergies?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    medications?: MedicationCreateNestedManyWithoutPatientInput
    patientLinks?: PatientCaregiverCreateNestedManyWithoutPatientInput
  }

  export type UserUncheckedCreateWithoutCaregiverLinksInput = {
    id?: string
    firstName: string
    lastName: string
    email?: string | null
    phone?: string | null
    role?: string
    password?: string | null
    birthDate?: string | null
    address?: string | null
    emergencyContact?: string | null
    emergencyPhone?: string | null
    medicalConditions?: string | null
    allergies?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    medications?: MedicationUncheckedCreateNestedManyWithoutPatientInput
    patientLinks?: PatientCaregiverUncheckedCreateNestedManyWithoutPatientInput
  }

  export type UserCreateOrConnectWithoutCaregiverLinksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCaregiverLinksInput, UserUncheckedCreateWithoutCaregiverLinksInput>
  }

  export type UserUpsertWithoutPatientLinksInput = {
    update: XOR<UserUpdateWithoutPatientLinksInput, UserUncheckedUpdateWithoutPatientLinksInput>
    create: XOR<UserCreateWithoutPatientLinksInput, UserUncheckedCreateWithoutPatientLinksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPatientLinksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPatientLinksInput, UserUncheckedUpdateWithoutPatientLinksInput>
  }

  export type UserUpdateWithoutPatientLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyPhone?: NullableStringFieldUpdateOperationsInput | string | null
    medicalConditions?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medications?: MedicationUpdateManyWithoutPatientNestedInput
    caregiverLinks?: PatientCaregiverUpdateManyWithoutCaregiverNestedInput
  }

  export type UserUncheckedUpdateWithoutPatientLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyPhone?: NullableStringFieldUpdateOperationsInput | string | null
    medicalConditions?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medications?: MedicationUncheckedUpdateManyWithoutPatientNestedInput
    caregiverLinks?: PatientCaregiverUncheckedUpdateManyWithoutCaregiverNestedInput
  }

  export type UserUpsertWithoutCaregiverLinksInput = {
    update: XOR<UserUpdateWithoutCaregiverLinksInput, UserUncheckedUpdateWithoutCaregiverLinksInput>
    create: XOR<UserCreateWithoutCaregiverLinksInput, UserUncheckedCreateWithoutCaregiverLinksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCaregiverLinksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCaregiverLinksInput, UserUncheckedUpdateWithoutCaregiverLinksInput>
  }

  export type UserUpdateWithoutCaregiverLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyPhone?: NullableStringFieldUpdateOperationsInput | string | null
    medicalConditions?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medications?: MedicationUpdateManyWithoutPatientNestedInput
    patientLinks?: PatientCaregiverUpdateManyWithoutPatientNestedInput
  }

  export type UserUncheckedUpdateWithoutCaregiverLinksInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    role?: StringFieldUpdateOperationsInput | string
    password?: NullableStringFieldUpdateOperationsInput | string | null
    birthDate?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyContact?: NullableStringFieldUpdateOperationsInput | string | null
    emergencyPhone?: NullableStringFieldUpdateOperationsInput | string | null
    medicalConditions?: NullableStringFieldUpdateOperationsInput | string | null
    allergies?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medications?: MedicationUncheckedUpdateManyWithoutPatientNestedInput
    patientLinks?: PatientCaregiverUncheckedUpdateManyWithoutPatientNestedInput
  }

  export type MedicationCreateManyPatientInput = {
    id?: string
    name: string
    dosage?: string | null
    quantity?: number | null
    presentation?: string | null
    instructions?: string | null
    color?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    deletedAt?: Date | string | null
  }

  export type PatientCaregiverCreateManyPatientInput = {
    id?: string
    caregiverId: string
    relation?: string | null
    createdAt?: Date | string
  }

  export type PatientCaregiverCreateManyCaregiverInput = {
    id?: string
    patientId: string
    relation?: string | null
    createdAt?: Date | string
  }

  export type MedicationUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dosage?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    presentation?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUpdateManyWithoutMedicationNestedInput
    intakes?: IntakeLogUpdateManyWithoutMedicationNestedInput
  }

  export type MedicationUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dosage?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    presentation?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    schedules?: ScheduleUncheckedUpdateManyWithoutMedicationNestedInput
    intakes?: IntakeLogUncheckedUpdateManyWithoutMedicationNestedInput
  }

  export type MedicationUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    dosage?: NullableStringFieldUpdateOperationsInput | string | null
    quantity?: NullableIntFieldUpdateOperationsInput | number | null
    presentation?: NullableStringFieldUpdateOperationsInput | string | null
    instructions?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    deletedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PatientCaregiverUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    relation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    caregiver?: UserUpdateOneRequiredWithoutCaregiverLinksNestedInput
  }

  export type PatientCaregiverUncheckedUpdateWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    caregiverId?: StringFieldUpdateOperationsInput | string
    relation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientCaregiverUncheckedUpdateManyWithoutPatientInput = {
    id?: StringFieldUpdateOperationsInput | string
    caregiverId?: StringFieldUpdateOperationsInput | string
    relation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientCaregiverUpdateWithoutCaregiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    relation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    patient?: UserUpdateOneRequiredWithoutPatientLinksNestedInput
  }

  export type PatientCaregiverUncheckedUpdateWithoutCaregiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    relation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PatientCaregiverUncheckedUpdateManyWithoutCaregiverInput = {
    id?: StringFieldUpdateOperationsInput | string
    patientId?: StringFieldUpdateOperationsInput | string
    relation?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScheduleCreateManyMedicationInput = {
    id?: string
    time: string
    frequencyType: string
    frequencyValue?: number | null
    daysOfWeek?: string | null
    endDate?: string | null
    active?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type IntakeLogCreateManyMedicationInput = {
    id?: string
    scheduleId?: string | null
    scheduledFor: Date | string
    action: string
    actionAt: Date | string
    note?: string | null
    createdAt?: Date | string
  }

  export type ScheduleUpdateWithoutMedicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    frequencyType?: StringFieldUpdateOperationsInput | string
    frequencyValue?: NullableIntFieldUpdateOperationsInput | number | null
    daysOfWeek?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    intakes?: IntakeLogUpdateManyWithoutScheduleNestedInput
  }

  export type ScheduleUncheckedUpdateWithoutMedicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    frequencyType?: StringFieldUpdateOperationsInput | string
    frequencyValue?: NullableIntFieldUpdateOperationsInput | number | null
    daysOfWeek?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    intakes?: IntakeLogUncheckedUpdateManyWithoutScheduleNestedInput
  }

  export type ScheduleUncheckedUpdateManyWithoutMedicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    time?: StringFieldUpdateOperationsInput | string
    frequencyType?: StringFieldUpdateOperationsInput | string
    frequencyValue?: NullableIntFieldUpdateOperationsInput | number | null
    daysOfWeek?: NullableStringFieldUpdateOperationsInput | string | null
    endDate?: NullableStringFieldUpdateOperationsInput | string | null
    active?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntakeLogUpdateWithoutMedicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledFor?: DateTimeFieldUpdateOperationsInput | Date | string
    action?: StringFieldUpdateOperationsInput | string
    actionAt?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    schedule?: ScheduleUpdateOneWithoutIntakesNestedInput
  }

  export type IntakeLogUncheckedUpdateWithoutMedicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduleId?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledFor?: DateTimeFieldUpdateOperationsInput | Date | string
    action?: StringFieldUpdateOperationsInput | string
    actionAt?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntakeLogUncheckedUpdateManyWithoutMedicationInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduleId?: NullableStringFieldUpdateOperationsInput | string | null
    scheduledFor?: DateTimeFieldUpdateOperationsInput | Date | string
    action?: StringFieldUpdateOperationsInput | string
    actionAt?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntakeLogCreateManyScheduleInput = {
    id?: string
    medicationId: string
    scheduledFor: Date | string
    action: string
    actionAt: Date | string
    note?: string | null
    createdAt?: Date | string
  }

  export type IntakeLogUpdateWithoutScheduleInput = {
    id?: StringFieldUpdateOperationsInput | string
    scheduledFor?: DateTimeFieldUpdateOperationsInput | Date | string
    action?: StringFieldUpdateOperationsInput | string
    actionAt?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    medication?: MedicationUpdateOneRequiredWithoutIntakesNestedInput
  }

  export type IntakeLogUncheckedUpdateWithoutScheduleInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicationId?: StringFieldUpdateOperationsInput | string
    scheduledFor?: DateTimeFieldUpdateOperationsInput | Date | string
    action?: StringFieldUpdateOperationsInput | string
    actionAt?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntakeLogUncheckedUpdateManyWithoutScheduleInput = {
    id?: StringFieldUpdateOperationsInput | string
    medicationId?: StringFieldUpdateOperationsInput | string
    scheduledFor?: DateTimeFieldUpdateOperationsInput | Date | string
    action?: StringFieldUpdateOperationsInput | string
    actionAt?: DateTimeFieldUpdateOperationsInput | Date | string
    note?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}